{"global":{"type":"table","fields":{"vec4":{"type":"function","returnTypes":[{"type":"ref","name":"vec4"}],"args":[{"name":"x"},{"name":"y"},{"name":"z"},{"name":"w"}]},"quat":{"type":"function"},"mat4":{"type":"function"},"mat3":{"type":"function"},"table":{"type":"table","fields":{"merge":{"type":"function","args":[{"name":"t1"},{"name":"t2"}],"description":"Sets all the key-value pairs from `t2` in `t1`."},"keys":{"type":"function","args":[{"name":"t"}],"description":"Returns an array of `t`'s keys."},"append":{"type":"function","args":[{"name":"arr1"},{"name":"arr2"}],"description":"Inserts all of `arr2`'s values at the end of `arr1`."},"remove_all":{"type":"function","args":[{"name":"arr"},{"name":"elem"}],"description":"Remove all values equal to `elem` from `arr`."},"search":{"type":"function","args":[{"name":"arr"},{"name":"elem"}],"description":"Return the index of `elem` in `arr` or nil if it's not found."},"filter":{"type":"function","args":[{"name":"arr"},{"name":"f"}],"description":"Returns a new array which contains only the values from`arr` for which `f(elem)` returns true (or any value besides`nil` or `false`)."},"shuffle":{"type":"function","args":[{"name":"t"},{"name":"rand"}],"description":"Randomly rearranges the values of `t`. The optional `rand` argument should be a function where `rand(n)` returnsan integer between 1 and n (like `math.random`). By default `math.random` isused."},"tostring":{"type":"function","args":[{"name":"t"}],"description":"Converts a table to a string.The returned string is a valid Lua table literal."},"values":{"type":"function","args":[{"name":"t"}],"description":"Returns an array of `t`'s values."},"deep_copy":{"type":"function","args":[{"name":"t"}],"description":"Returns a deep copy of `t` (all `t`'s keys and valuesare copied recursively). Cycles are detected and reproducedin the new table."},"count":{"type":"function","args":[{"name":"t"}],"description":"Returns the total number of pairs in the table."},"clear":{"type":"function","args":[{"name":"t"}],"description":"Remove all `t`'s pairs."},"shallow_copy":{"type":"function","args":[{"name":"t"}],"description":"Returns a shallow copy of `t` (i.e. a new tablewith the same keys and values as `t`)."}}},"mat2":{"type":"function"},"noglobals":{"type":"function","args":[{"name":""}],"description":"Prevents the creation of new global variables.An error will be raised if a new global is created after thiscall, or if an attempt is made to read a nil global."},"vec2":{"type":"function","returnTypes":[{"type":"ref","name":"vec2"}],"args":[{"name":"x"},{"name":"y"}]},"log":{"type":"function","args":[{"name":"msg"},{"name":"..."}],"description":"Log a message to the console. The message will also appearin an overlay on the main window.`msg` may contain format specifiers like the standard Lua `string.format`function.The logged messages are prefixed with the file nameand line number where `log` was called.Example:\n```\n log(\"here\")log(\"num = %g, string = %s\", 1, \"two\")\n```\n"},"math":{"type":"table","fields":{"oblique":{"type":"function","args":[{"name":"angle"},{"name":"zscale"},{"name":"left"},{"name":"right"},{"name":"bottom"},{"name":"top"},{"name":"near"},{"name":"far"}],"description":"Creates a 4x4 oblique projection matrix.`near` and `far` are the distance from the viewer of thenear and far clipping plains (negative means behind the viewer).\nTheir default values are `-1` and `1`."},"perspective":{"type":"function","args":[{"name":"fovy"},{"name":"aspect"},{"name":"near"},{"name":"far"}],"description":"Creates a 4x4 matrix for a symmetric perspective-view frustum.\n-   `fovy` is the field of view in the y plain, in radians.\n-   `aspect` is typically the window width divided by its height.\n-   `near` and `far` are the distances of the near and far clipping    plains from the camera (these should be positive)."},"fract":{"type":"function","args":[{"name":"v"}],"description":"Returns the fractional part of `v`. If `v` is a vectorit returns a vector of the same size with each componentbeing the fractional part of the corresponding componentin the original vector."},"scale4":{"type":"function","args":[{"name":"scaling"}],"description":"Creates a 4x4 scale matrix.`scaling` may be 1, 2 or 3 numbers or a`vec2` or `vec3`. If 1 number is providedit is assume to be the x and y componentsof the scaling and the z scaling is assumedto be 1. If 2 numbers or a `vec2` is provided,they are the scaling for the x and y componentsand z is assumed to be 1."},"slerp":{"type":"function","args":[{"name":"from"},{"name":"to"},{"name":"t"}],"description":"Returns the spherical linear interpolation of the two quaternions`from` and `to`. `t` should be a number between 0 and 1."},"distance":{"type":"function","args":[{"name":"vector1"},{"name":"vector2"}],"description":"Returns the distance between two vectors."},"randvec3":{"type":"function","args":[{"name":""}],"description":"Returns a `vec3` with all components set to a random numberbetween 0 and 1."},"simplex":{"type":"function","args":[{"name":"pos"}],"description":"Generate simplex noise. `pos` can be a 2, 3, or 4 dimensional vector,or a number.\nThe returned value is between -1 and 1."},"mix":{"type":"function","args":[{"name":"from"},{"name":"to"},{"name":"t"}],"description":"Returns the linear interpolation between `from` and `to` determined by`t`. `from` and `to` can be numbers or vectors, and must be the sametype. `t` should be a number between 0 and 1. `from` and `to` can alsobe quaternions. In this case `math.mix` returns the spherical linearinterpolation of the two quaternions."},"perlin":{"type":"function","args":[{"name":"pos"},{"name":"period"}],"description":"Generate perlin noise. `pos` can be a 2, 3, or 4 dimensional vector,or a number. If the second argument is supplied then the noise will beperiodic with the given period. `period` should be of the same type as`pos` and its components should be integers greater than 1.\nThe returned value is between -1 and 1."},"dot":{"type":"function","args":[{"name":"vector1"},{"name":"vector2"}],"description":"Returns the dot product of two vectors. The vectors must have the samesize."},"lookat":{"type":"function","args":[{"name":"eye"},{"name":"center"},{"name":"up"}],"description":"Creates a 4x4 view matrix at `eye`, looking in the direction of`center` with the y axis of the camera pointing in the samedirection as `up`."},"randvec4":{"type":"function","args":[{"name":""}],"description":"Returns a `vec4` with all components set to a random numberbetween 0 and 1."},"rotate4":{"type":"function","args":[{"name":"rotation"}],"description":"Creates a 4x4 rotation matrix.`rotation` can be either a quaternion, oran angle (in radians) followed by an optional `vec3` axis.If the axis is omitted it is assumed to be `vec3(0, 0, 1)`so the rotation becomes a 2D rotation in the xy plane aboutthe z axis."},"translate4":{"type":"function","args":[{"name":"position"}],"description":"Creates a 4x4 translation matrix.`position` may be either 2 or 3 numbers (thex, y and z components) or a `vec2` or `vec3`. If the z component is omitted it is assumed tobe 0."},"ortho":{"type":"function","args":[{"name":"left"},{"name":"right"},{"name":"bottom"},{"name":"top"},{"name":"near"},{"name":"far"}],"description":"Creates a 4x4 orthographic projection matrix.`near` and `far` are the distance from the viewer of thenear and far clipping plains (negative means behind the viewer).\nTheir default values are `-1` and `1`."},"cross":{"type":"function","args":[{"name":"vector1"},{"name":"vector2"}],"description":"Returns the cross product of two 3 dimensional vectors."},"inverse":{"type":"function","args":[{"name":"matrix"}],"description":"Returns the inverse of a matrix."},"sign":{"type":"function","args":[{"name":"n"}],"description":"Returns +1 if n > 0, -1 if n < 0 and 0 if n == 0."},"length":{"type":"function","args":[{"name":"vector"}],"description":"Returns the length of a vector."},"clamp":{"type":"function","args":[{"name":"v"},{"name":"min"},{"name":"max"}],"description":"Clamps a value `v` between `min` and `max`. `v`, `min` and `max`may be vectors. In this case each component is clamped based on thecorresponding components in `min` and `max`."},"randvec2":{"type":"function","args":[{"name":""}],"description":"Returns a `vec2` with all components set to a random numberbetween 0 and 1."},"normalize":{"type":"function","args":[{"name":"vector"}],"description":"Returns the normalized form of a vector (i.e. the vector that points inthe same direction, but whose length is 1). If the given vector has zerolength, then a vector of the same size is returned whose first componentis 1 and whose remaining components are 0."}}},"am":{"type":"table","fields":{"controller_button_released":{"type":"function","args":[{"name":"index"},{"name":"button"}],"description":"Returns `true` if the given button of controller `index`was released since the last frame."},"parallel":{"type":"function","args":[{"name":"actions"}],"description":"Returns an action that runs the given array ofactions all at the same time. The returned actionfinishes once all the actions in the array arefinished."},"line":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"point1"},{"name":"point2"},{"name":"thickness"},{"name":"color"}],"description":"Draws a line from `point1` to `point2`.`point1` and `point1` should be `vec2`s.`thickness` should be a number. The default is 1.`color` should be a `vec4`. The default is white.Fields:\n- `point1`: Updatable.\n- `point2`: Updatable.\n- `thickness`: Updatable.\n- `color`: Updatable.Default tag: `\"line\"`."},"ubyte_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `ubyte` view to a newly created buffer and fillsit with the values in the given table."},"ushort_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `ushort_norm` view to a newly created buffer and fillsit with the values in the given table."},"audio_buffer":{"type":"function","args":[{"name":"buffer"},{"name":"channels"},{"name":"sample_rate"}],"description":"Returns a new audio buffer using the given raw buffer (a buffer"},"init_gamecenter":{"type":"function","args":[{"name":""}],"description":"Initialize Game Center. This must be called before any otherGame Center functions."},"float_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `float` view to a newly created buffer and fillsit with the values in the given table."},"translate":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"position"}],"description":"Apply a translation to a 4x4 matrix uniform.`uniform` is the uniform name as a string.It is `\"MV\"` by default.`position` may be either 2 or 3 numbers (thex, y and z components) or a `vec2` or `vec3`.If the z component is omitted it is assumed tobe 0.Fields:\n- `position`: The translation position as a `vec3`. Updatable.\n- `position2d`: The translation position as a `vec2`. Updatable.\n- `x`, `y`, `z`: The `x`, `y` and `z` components of the position. Updatable.Default tag: `\"translate\"`.Examples:\n```\n local node1 = am.translate(10, 20)local node2 = am.translate(vec2(10, 20))\nlocal node3 = am.translate(\"MyModelViewMatrix\", 1, 2, -3.5)local node4 = am.translate(vec3(1, 2, 3))node1.position2d = vec2(30, 40)node2.x = 40node2.y = 50\nnode3.position = vec3(1, 2, -3)\n```\n"},"cull_sphere":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniforms..."},{"name":"radius"},{"name":"center"}],"description":"This first takes the matrix product of the given uniforms (which should be`mat4`s). Then it determines whether the sphere with the given centerand radius would be visible using the previously computed matrix\nproduct as the model-view-projection matrix. If it wouldn't be visible thennone of this node's children are rendered (i.e. they are culled).The default value for `uniforms` is `\"P\" and \"MV\"` and the defaultvalue for `center` is `vec3(0)`.Fields:\n- `radius`: Updatable.\n- `center`: Updatable.Default tag: `\"cull_sphere\"`."},"perf_stats":{"type":"function","args":[{"name":""}],"description":"Returns a table with the following fields:\n- `avg_fps`: frames per second averaged over the last 60 frames\n- `min_fps`: the minimum frames per second over the last 60 frames\n- `frame_draw_calls`: the number of `draw` calls in the last frame\n- `frame_use_program_calls`: the number of `use_program` calls in the last frame"},"decode_png":{"type":"function","args":[{"name":"buffer"}],"description":"Converts the raw buffer, which should be a png encodingof an image, into an image buffer."},"struct_array":{"type":"function","args":[{"name":"size"},{"name":"spec"}],"description":"Returns a table of views of the given `size` as defined by`spec`. `spec` is a sequence of view name (a string) andview type (also a string) pairs.The returned table can be passed directly"},"submit_gamecenter_score":{"type":"function","args":[{"name":"leaderboard_id"},{"name":"score"}],"description":"Submit a score to a leaderboard. Note that Game Center accepts only integer scores."},"load_audio":{"type":"function","args":[{"name":"filename"}],"description":"Loads the given audio file and returns a new audio buffer.The file must be a `.ogg` audio file.Returns `nil` if the file was not found."},"language":{"type":"function","args":[{"name":""}],"description":"Returns the user's preferred ISO 639-1 language code in lower case(e.g. `\"en\"`),\npossibly followed by a dash and an ISO 3166-1 coutry code in upper case (e.g. `\"fr-CA\"`).The returned value will be one of the languages listed in"},"controllers_attached":{"type":"function","args":[{"name":""}],"description":"Returns a list of controller indexes attached since the last frame."},"sprite":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"source"},{"name":"color"},{"name":"halign"},{"name":"valign"}],"description":"Renders a sprite (an image).`source` can be either a filename, an ASCII art string or a *sprite spec*.When `source` is a filename, that file is loaded and displayed as thesprite. Currently only `.png` and `.jpg` files are supported. Note thatloaded files are cached, so each file will only be loaded once.`source` may also be an ASCII art string. This is a string with at leastone newline character. Each row in the string represents a row of pixels.Here's an example:\n```\n local face = [[..YYYYY...Y.....Y.Y..B.B..YY.......YY.R...R.YY..RRR..Y.Y.....Y...YYYYY..]]am.window{}.scene = am.scale(20) ^ am.sprite(face)\n```\nThe resulting image looks like this:![face](images/face.png)The mapping from characters to colors is determined by the`am.ascii_color_map` table. By default this is defined as:\n```\n am.ascii_color_map = {\n    W = vec4(1, 1, 1, 1),          -- full white\n    w = vec4(0.75, 0.75, 0.75, 1), -- silver\n    K = vec4(0, 0, 0, 1),          -- full black\n    k = vec4(0.5, 0.5, 0.5, 1),    -- dark grey\n    R = vec4(1, 0, 0, 1),          -- full red\n    r = vec4(0.5, 0, 0, 1),        -- half red (maroon)\n    Y = vec4(1, 1, 0, 1),          -- full yellow\n    y = vec4(0.5, 0.5, 0, 1),      -- half yellow (olive)\n    G = vec4(0, 1, 0, 1),          -- full green\n    g = vec4(0, 0.5, 0, 1),        -- half green\n    C = vec4(0, 1, 1, 1),          -- full cyan\n    c = vec4(0, 0.5, 0.5, 1),      -- half cyan (teal)\n    B = vec4(0, 0, 1, 1),          -- full blue\n    b = vec4(0, 0, 0.5, 1),        -- half blue (navy)\n    M = vec4(1, 0, 1, 1),          -- full magenta\n    m = vec4(0.5, 0, 0.5, 1),      -- half magenta\n    O = vec4(1, 0.5, 0, 1),        -- full orange\n    o = vec4(0.5, 0.25, 0, 1),     -- half orange (brown)}\n```\nbut you can modify it as you please (though this must bedone before creating a sprite).Any characters not in the color map will come out astransparent pixels, except for space characters which areignored.The third kind of source is a *sprite spec*."},"controller_button_down":{"type":"function","args":[{"name":"index"},{"name":"button"}],"description":"Returns `true` if the given button of controller `index`was down at the start of the current frame."},"vec4_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `vec4` view to a newly created buffer containingthe values in the given table.The table may contain either `vec4`s or numbers (though not a mix). If thetable contains numbers they are used for the vector components and theresulting view will have a quarter the number of elements as there arenumbers in the table."},"short_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `short` view to a newly created buffer and fillsit with the values in the given table."},"controller_rstick_pos":{"type":"function","args":[{"name":"index"}],"description":"Returns the position of the left stick of controller `index`as a `vec2`.The position values range\nfrom -1 to 1 in both the x and y components. Negative x means leftand negative y means down."},"byte_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `byte_norm` view to a newly created buffer and fillsit with the values in the given table."},"base64_decode":{"type":"function","args":[{"name":"string"}],"description":"Converts a base64 string to a buffer."},"short_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `short_norm` view to a newly created buffer and fillsit with the values in the given table."},"eval_js":{"type":"function","args":[{"name":"js"}],"description":"Runs the given JavaScript string and returns theresult as a Lua value. JavaScript objects and arraysare converted to Lua tables and other JavaScripttypes are converted to the corresponding Lua types.`undefined` is converted to `nil`.This function only works when running in a browser.On other platforms it has no effect and always returns `nil`."},"series":{"type":"function","args":[{"name":"actions"}],"description":"Returns an action that runs the given arrayof actions one after another."},"controller_attached":{"type":"function","args":[{"name":"index"}],"description":"Returns `true` if controller `index` was attached since the last frame."},"sfxr_synth":{"type":"function","args":[{"name":"settings"}],"description":"Returns an audio buffer containing a generated sound effect.`settings` can either be a table containing any number of thefollowing fields:Field                Default value     Notes\n-----------------    ----------------  -------------------------------------------------`wave_type     `     `\"square\"`        Can also be `\"sawtooth\"`, `\"sine\"` or `\"noise\"``base_freq     `     `0.3``freq_limit    `     `0.0``freq_ramp     `     `0.0``freq_dramp    `     `0.0``duty          `     `0.0``duty_ramp     `     `0.0``vib_strength  `     `0.0``vib_speed     `     `0.0``vib_delay     `     `0.0``env_attack    `     `0.0``env_sustain   `     `0.3``env_decay     `     `0.4``env_punch     `     `0.0``filter_on     `     `false``lpf_resonance `     `0.0``lpf_freq      `     `1.0``lpf_ramp      `     `0.0``hpf_freq      `     `0.0``hpf_ramp      `     `0.0``pha_offset    `     `0.0``pha_ramp      `     `0.0``repeat_speed  `     `0.0``arp_speed     `     `0.0``arp_mod       `     `0.0`or a numeric seed. Use the sfxr examplein the [online editor](http://www.amulet.xyz/editor.html) to generate seeds."},"controller_rt_val":{"type":"function","args":[{"name":"index"}],"description":"Returns the value of the right trigger axis of controller `index`.The returned value is between 0 and 1."},"framebuffer":{"type":"function","args":[{"name":"texture"},{"name":"depth_buf"},{"name":"stencil_buf"}],"description":"Creates framebuffer with the given texture attached.`depth_buf` and `stencil_buf` determine whether theframebuffer has a depth and/or stencil buffer. These should be`true` or `false` (default is `false`)."},"controller_lstick_pos":{"type":"function","args":[{"name":"index"}],"description":"Returns the position of the left stick of controller `index`as a `vec2`.The position values range\nfrom -1 to 1 in both the x and y components. Negative x means leftand negative y means down."},"load_script":{"type":"function","args":[{"name":"filename"}],"description":"Loads the Lua script in `filename` and returnsa function that, when called, will run the script.If the file doesn't exist `nil` is returned."},"circle":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"center"},{"name":"radius"},{"name":"color"},{"name":"sides"}],"description":"Draws a circle or regular polygon.`center` should be a `vec2`.`color` should be a `vec4`. The default is white.`sides` is the number of sides to use when rendering thecircle. The default is 255. You can change this to makeother regular polygons. For example change it to 6 todraw a hexagon.Fields:\n- `center`: The circle center as a `vec2`. Updatable.\n- `radius`: The circle radius. Updatable.\n- `color`: The circle color as a `vec4`. Updatable.Default tag: `\"circle\"`."},"text":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"font"},{"name":"string"},{"name":"color"},{"name":"halign"},{"name":"valign"}],"description":"Renders some text."},"bind":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"bindings"}]},"uint_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `uint` view to a newly created buffer and fillsit with the values in the given table."},"ushort_elem_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `ushort_elem` view to a newly created buffer and fillsit with the values in the given table."},"vec2_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `vec2` view to a newly created buffer and fillsit with the values in the given table.The table may contain either `vec2`s or numbers (though not a mix). If thetable contains numbers they are used for the vector components and theresulting view will have half the number of elements as there arenumbers in the table."},"billboard":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"preserve_scaling"}],"description":"Removes rotation from `uniform`, which should be a `mat4`.By default `uniform` is `\"MV\"`.If `preserve_scaling` is `false` or omitted then any scalingwill also be removed from the matrix. If it is `true`, thenscaling will be preserved, as long as it's the same acrossall three axes.Default tag: `\"billboard\"`"},"use_program":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"program"}]},"to_json":{"type":"function","args":[{"name":"value"}],"description":"Converts the given Lua value to a JSON string andreturns it.Tables with string keys are converted to JSON objectsand tables with consecutive integer keys starting at 1are converted to JSON arrays. Empty tables are convertedto empty JSON arrays. Other types of tablesare not supported anc cycles are not detected."},"loop":{"type":"function","args":[{"name":"func"}],"description":"`func` should be a function that returns anaction. `am.loop` returns an action that repeatedlyruns the action returned by `func`."},"group":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"children"}],"description":"Group nodes are only for grouping child nodes undera common parent. They have no other effect.The children can be passed in as a table.Default tag: `\"group\"`.Example:\n```\n local group_node = am.group{node1, node2, node3}\n```\n"},"controller_present":{"type":"function","args":[{"name":"index"}],"description":"Returns `true` if controller `index` is currently connected."},"quads":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"n"},{"name":"spec"},{"name":"usage"}],"description":"Returns a node that renders a set of quads. The returned node"},"current_time":{"type":"function","args":[{"name":""}],"description":"This returns the time since the program started, in seconds.This value can change over the course of a frame."},"texture2d":{"type":"function","args":[{"name":"filename"}],"description":"This is shorthand for `am.texture2d(am.load_image(filename))`."},"load_buffer":{"type":"function","args":[{"name":"filename"}],"description":"Loads the given file and returns a buffer containing thefile's data, or `nil` if the file wasn't found."},"particles2d":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"settings"}],"description":"Renders a simple 2D particle system.`settings` should be a table with any of the following fields:\n- `source_pos`: The position where the particles emit from (`vec2`)\n- `source_pos_var`: The source position variation (`vec2`)\n- `start_size`: The start size of the particles (number)\n- `start_size_var`: The start size variation (number)\n- `end_size`: The end size of the particles (number)\n- `end_size_var`: The end size variation (number)\n- `angle`: The angle the particles emit at (radians)\n- `angle_var`: The variation in the angle the particles emit at (radians)\n- `speed`: The speed of the particles (number)\n- `speed_var`: The variation in the speed of the particles (number)\n- `life`: The lifetime of the particles (seconds)\n- `life_var`: The variation in lifetime of the particles (seconds)\n- `start_color`: The start color of the particles (`vec4`)\n- `start_color_var`: The variation in the start color of the particles (`vec4`)\n- `end_color`: The end color of the particles (`vec4`)\n- `end_color_var`: The variation in the end color of the particles (`vec4`)\n- `emission_rate`: The number of particles to emit per second\n- `start_particles`: The initial number of particles\n- `max_particles`: The maximum number of particles\n- `gravity`: Gravity to apply to the particles (`vec2`)"},"buffer":{"type":"function","args":[{"name":"size"}],"description":"Returns a new buffer of the given size in bytes.The buffer's memory will be zeroed."},"program":{"type":"function","args":[{"name":"vertex_shader"},{"name":"fragment_shader"}],"description":"Compiles and returns a shader program for use with"},"encode_png":{"type":"function","args":[{"name":"image_buffer"}],"description":"Returns a raw buffer containing the png encoding of the givenimage."},"load_image":{"type":"function","args":[{"name":"filename"}],"description":"Loads the given image file and returns a new image buffer.Only `.png` and `.jpg` files are supported.Returns `nil` if the file was not found."},"image_buffer":{"type":"function","args":[{"name":"buffer"},{"name":"width"},{"name":"height"}],"description":"Creates an image buffer of the given width and height.If `height` is omitted it is the same as `width` (theimage is square)."},"load_string":{"type":"function","args":[{"name":"filename"}],"description":"Loads `filename` and returns its contents as a stringor `nil` if the file wasn't found."},"load_bitmap_font":{"type":"function","args":[{"name":"filename"},{"name":"key"}],"description":"Loads the image `filename` and returns a font usingthe glyph layout described by `key` where `key` is a stringcontaining all the glyphs in the file as they are layed out.All glyphs must have the same width and height which isdetermined from the width and height of the image and thenumber of rows and columns in `key`. For example if thekey is:\n```\n [[ABCDEFGHI]]\n```\nthen the image contains 9 glyphs in 3 rows and 3 columns.If the image has height 30 and width 36 then each glyph haswidth 10 and height 12."},"wrap":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"node"}],"description":"This \"wraps\" `node` inside a special type of node calleda *wrap node*.When a wrap node is rendered it renders the inner node.However any nodes added as children of a wrap node are alsoadded to the leaf node(s) of the inner node.For example suppose we want to create a transformation nodecalled `move_and_rotate` that does both a translation and a rotation:\n```\n function move_and_rotate(x, y, degrees)    return am.translate(x, y) ^ am.rotate(math.rad(degrees))end\n```\nWe would like to be able to create such a node andadd children to it. Like so:\n```\n local mvrot = move_and_rotate(10, 20, 60)\nmvrot:append(am.rect(-10, -10, 10, 10))\n```\nHowever what this will do is add the `rect` node as achild of the `translate` node returned by `move_and_rotate`.Instead we need to do:\n```\n \nmvrot\"rotate\":append(am.rect(-10, -10, 10, 10))\n```\nwhich is a bit clunky.A wrap node solves this problem:\n```\n function move_and_rotate(x, y, degrees)    return am.wrap(am.translate(x, y) ^ am.rotate(math.rad(degrees)))endlocal mvrot = move_and_rotate(10, 20, 60)\nmvrot:append(am.rect(-10, -10, 10, 10))\n```\nFor completeness here we add some fields to set the x, y and degrees propertiesof our new node:\n```\n function move_and_rotate(x, y, degrees)    local inner = am.translate(x, y) ^ am.rotate(math.rad(degrees))    local wrapped = am.wrap(inner)    function wrapped:get_x()        return x    end    function wrapped:set_x(v)        x = v        inner.position2d = vec2(x, y)    end    function wrapped:get_y()        return y    end    function wrapped:set_y(v)        y = v        inner.position2d = vec2(x, y)    end    function wrapped:get_degrees()        return degrees    end    function wrapped:set_degrees(v)        degrees = v        inner\"rotate\".angle = math.rad(degrees)    end    return wrappedend\nlocal mvrot = move_and_rotate(-100, -100, 0)\nmvrot:append(am.rect(-50, -50, 50, 50))mvrot.x = 100mvrot.y = 100mvrot.degrees = 45\n```\nThere are some caveats when using wrap nodes:\n- The inner node is not considered part of the scene  graph for the purpose of running actions. So any actions  need to be attached to the wrap node, not the inner node.\n- Tag search functions do not search the inner node."},"window":{"type":"function","args":[{"name":"settings"}],"description":"Creates a new window and returns a handle to it. `settings` is atable with any of the following fields:\n- **`mode`**:    Either `\"windowed\"` or `\"fullscreen\"`. A fullscreen window will    have the same resolution as the user's desktop. The default is    `\"windowed\"`. Not all platforms support windowed mode (e.g. iOS).    On these platforms this setting is ignored.\n- **`width`** and **`height`**:    The desired size of the window. This is not necessarily the size    of the window in pixels (although it usually is if the window    is created in `\"windowed\"` mode). Instead it defines the size of the window's    *default coordinate system*. If letterboxing is enabled then this\n    is (`-width/2`, `-height/2`) in the bottom-left corner and\n    (`width/2`, `height/2`) in the top-right corner.    If letterboxing is disabled, then the    coordinate system will extend in the horizontal or vertical    directions to ensure an area of at least `width`×`height` is    visible in the center of the window. In either case the centre    coordinate will always be (0, 0).    The default size is 640×480.\n- **`title`**:    The window title.\n- **`resizable`**:    Whether the window can be resized by the user (`true` or `false`,    default `true`).\n- **`borderless`**:    Whether the window has a title bar and border (`true` or `false`,    default `false`).\n- **`highdpi`**:    Whether to use high DPI resolution if available (`true` or `false`,    default `false`).\n- **`depth_buffer`**:    Whether the window has a depth buffer (`true` or `false`,    default `false`).\n- **`stencil_buffer`**:    Whether the window has a stencil buffer (`true` or `false`,    default `false`).\n- **`stencil_clear_value`**:    The value to clear the stencil buffer with before drawing each    frame (an integer between 0 and 255). The default is 0.\n- **`lock_pointer`**:    `true` or `false`. When pointer lock is enabled the cursor will be    hidden and mouse movement will be set to \"relative\" mode. In this    mode the mouse is tracked infinitely in all directions, i.e. as if    there is no edge of the screen to stop the mouse cursor. This is\n    useful for implementing first-person style mouse-look. The default    is `false`.\n- **`show_cursor`**:    Whether to show the mouse cursor (`true` or `false`, default `true`).\n- **`clear_color`**:    The color (a `vec4`) used to clear the window each frame before drawing.    The default clear color is black (`vec4(0, 0, 0, 1)`).\n- **`letterbox`**:    `true` or `false`. Indicates whether the original aspect ratio (as    determined by the `width` and `height` settings of the window)    should be maintained after a resize by adding black horizontal or    vertical bars to the sides of the window. The default is `true`.\n- **`msaa_samples`**:\n    The number of samples to use for multisample anti-aliasing. This\n    must be a power of 2. Use zero (the default) for no anti-aliasing.\n- **`orientation`**:    `\"portrait\"` or `\"landscape\"`. This specifies the supported    orientation of the window on platforms that support orientation    changes (e.g. iOS). If omitted, both orientations are supported.\n- **`projection`**:    A custom projection matrix (a `mat4`) to be used for the window's    coordinate system. This matrix is used when transforming    mouse or touch event coordinates and is set as the projection    matrix for rendering, but does not affect the `left`, `right`,    `top`, `bottom`, `width` and `height` fields of the window."},"postprocess":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"settings"}],"description":"Allows for post-processing of a scene. First the childrenof the `postprocess` node are rendered into a texture, then\nthe texture is rendered to the entire window using a user-suppliedshader program.`settings` is a table containing any number of the following fields:\n- `width`: the width of the texture to render the children into. If omitted the window width is used.\n- `height`: the height of the texture to render the children into. If omitted the window height is used."},"show_gamecenter_leaderboard":{"type":"function","args":[{"name":"leaderboard_id"}],"description":"Display a leaderboard."},"read_uniform":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"}],"description":"This node has no effect on rendering. Instead it records thevalue of the named uniform when rendering occurs.\nThis is useful for finding the value of the model-view matrix (`MV`) at aspecific node without having to keep track of all the ancestor transforms. Thiscould then be used to, for example, determine the position of a mouse click\nin a node's coordinate space, by taking the inverse of the model-view matrix.Fields:\n- `value`: The value of the uniform, or nil if  the node hasn't been rendered yet,  or the named uniform wasn't set in an ancestor node.Default tag: `\"read_uniform\"`."},"lookat":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"eye"},{"name":"center"},{"name":"up"}],"description":"Sets `uniform` to the \"lookat matrix\" which looks from `eye` (a `vec3`)to `center` (a `vec3`), with `up` (a unit `vec3`) as the up direction.This node can be thought of a camera positioned at `eye` andfacing the point `center`.The default value for `uniform` is `\"MV\"`.Fields:\n- `eye`: The camera position (`vec3`). Updatable.\n- `center`: A point the camera is facing (`vec3`). Updatable.\n- `up`: The up direction of the camera (`vec3`). Updatable.Default tag: `\"lookat\"`."},"viewport":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"x"},{"name":"y"},{"name":"width"},{"name":"height"}],"description":"Set the viewport, which is the rectangular areaof the window into which rendering will occur.\n`x` and `y` is the bottom-left corner\nof the viewport in pixels, where the bottom-left cornerof the window is (0, 0). `width` and `height` arealso in pixels.Fields:\n- `x`, `y`, `width`, `height`: Updatable.Default tag: `\"viewport\"`."},"cull_face":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"face"}],"description":"Culls triangles with a specific winding.The possible values for `face` are:\n- `\"back\"`: Cull back-facing triangles (same as `\"cw\"` below)\n- `\"front\"`: Cull front-facing triangles (same as `\"ccw\"` below)\n- `\"cw\"`: Cull clockwise wound triangles.\n- `\"ccw\"`: Cull counter-clockwise wound triangles.\n- `\"none\"`: Do not cull any triangles.Fields:\n- `face`: Updatable.Default tag: `\"cull_face\"`."},"color_mask":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"red"},{"name":"green"},{"name":"blue"},{"name":"alpha"}],"description":"Apply a color mask. The four arguments can be `true` or `false`and determine whether the corresponding color channelis updated in the rendering target (either the current windowor framebuffer being rendered to).For example using a mask of `am.color_mask(false, true, false, true)`will cause only the green and alpha channels to be updated.Fields:\n- `red`: Updatable.\n- `green`: Updatable.\n- `blue`: Updatable.\n- `alpha`: Updatable.Default tag: `\"color_mask\"`."},"rect":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"x1"},{"name":"y1"},{"name":"x2"},{"name":"y2"},{"name":"color"}],"description":"Draws a rectangle from (`x1`, `y1`) to (`x2`, `y2`).`color` should be a `vec4` and defaults to white.Fields:\n- `x1`: The left coordinate of the rectangle. Updatable.\n- `y1`: The bottom coordinate of the rectangle. Updatable.\n- `x2`: The right coordinate of the rectangle. Updatable.\n- `y2`: The top coordinate of the rectangle. Updatable.\n- `color`: The color of the rectangle as a `vec4`. Updatable.Default tag: `\"rect\"`."},"draw":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"primitive"},{"name":"elements"},{"name":"first"},{"name":"count"}],"description":"Draws the currently bound vertices usingthe current shader program with thecurrently bound parameter values.`primitive` can be one of the following:\n- `\"points\"`\n- `\"lines\"`\n- `\"line_strip\"`\n- `\"line_loop\"`\n- `\"triangles\"`\n- `\"triangle_strip\"`\n- `\"triangle_fan\"`Note that `\"line_loop\"` and `\"triangle_fan\"` may be slow on some systems.`elements`, if supplied, should be a `ushort_elem` or `uint_elem`\nview containing 1-based attribute indices. If omitted the attributesare rendered in order as if `elements` were"},"gamecenter_available":{"type":"function","args":[{"name":""}],"description":"Returns true if Game Center was successfully initialized."},"load_obj":{"type":"function","args":[{"name":"filename"}],"description":"This loads the given `.obj` file and returns 4 things:1. A buffer containing the vertex, normal and texture coordinate   data.2. The stride in bytes.3. The offset of the normals in bytes.4. The offset of the texture coordinates in bytes.The vertex data is always at offset 0. If the normal or texture coordinate datais not present, the corresponding return value will be nil.The faces in the `.obj` file must all be triangles (quads aren't supported).Here's an example of how to load a model and display it. The exampleloads an model from `model.obj` and assumes it contains normal\nand texture coordinate data and the triangles have a counter-clockwisewinding. It loads a texture from the file `texture.png`.\n```\n local win = am.window{depth_buffer = true}local buf, stride, norm_offset, tex_offset = am.load_obj(\"model.obj\")local verts = buf:view(\"vec3\", 0, stride)local normals = buf:view(\"vec3\", norm_offset, stride)local uvs = buf:view(\"vec2\", tex_offset, stride)    local shader = am.program([[precision mediump float;attribute vec3 vert;attribute vec2 uv;attribute vec3 normal;uniform mat4 MV;uniform mat4 P;varying vec3 v_shadow;varying vec2 v_uv;void main() {    vec3 light = normalize(vec3(1, 0, 2));    vec3 nm = normalize((MV * vec4(normal, 0.0)).xyz);    v_shadow = vec3(max(0.1, dot(light, nm)));    v_uv = uv;    gl_Position = P * MV * vec4(vert, 1.0);}]], [[precision mediump float;uniform sampler2D tex;varying vec3 v_shadow;varying vec2 v_uv;void main() {    gl_FragColor = texture2D(tex, v_uv) * vec4(v_shadow, 1.0);}]])win.scene =    am.cull_face\"ccw\"\n    ^ am.translate(0, 0, -5)    ^ am.use_program(shader)    ^ am.bind{        P = math.perspective(math.rad(60), win.width/win.height, 1, 1000),        vert = verts,        normal = normals,        uv = uvs,        tex = am.texture2d(\"texture.png\"),    }    ^am.draw\"triangles\"\n```\n"},"scale":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"scaling"}],"description":"Apply a scale transform to a 4x4 matrix uniform.`uniform` is the uniform name as a string.It is `\"MV\"` by default.`scaling` may be 1, 2 or 3 numbers or a`vec2` or `vec3`. If 1 number is providedit is assume to be the x and y componentsof the scaling and the z scaling is assumedto be 1. If 2 numbers or a `vec2` is provided,they are the scaling for the x and y componentsand z is assumed to be 1.Fields:\n- `scale`: The scale as a `vec3`. Updatable.\n- `scale2d`: The scale as a `vec2`. Updatable.\n- `x`, `y`, `z`: The `x`, `y` and `z` components of the scale. Updatable.Default tag: `\"scale\"`.Examples:\n```\n local node1 = am.scale(2)local node2 = am.scale(2, 1)local node3 = am.scale(vec2(1, 2))local node4 = am.scale(\"MyModelViewMatrix\", vec3(0.5, 2, 3))node1.scale2d = vec2(1)node2.x = 3node4.scale = vec3(1, 3, 2)\n```\n"},"glob":{"type":"function","args":[{"name":"patterns"}],"description":"Returns an array (table) of file names matching the given glob pattern(s).`patterns` should be a table of glob pattern strings.A glob pattern is a file path with zero or more wildcard (`*`) characters.Any matching files that are directories will have a slash (`/`)appended to their names, even on Windows.The slash character (`/`) can be used as a directory separatoron Windows (you don't need to use `\\`).Furthermore returned paths will always have '/' as the directory separator,even on Windows.**Note:**This function only searches for files on the file system. It won't searchthe resource archive in a exported game. Its intended use isfor writing file processing utilities and not for use directly in gamesyou wish to distribute.Example:\n```\n local image_files = am.glob{\"images/*.png\", \"images/*.jpg\"}\n```\n"},"controller_button_pressed":{"type":"function","args":[{"name":"index"},{"name":"button"}],"description":"Returns `true` if the given button of controller `index`was pressed since the last frame.`button` can be one of the following strings:\n- `\"a\"`\n- `\"b\"`\n- `\"x\"`\n- `\"y\"`\n- `\"back\"`\n- `\"guide\"`\n- `\"start\"`\n- `\"ls\"`\n- `\"rs\"`\n- `\"lb\"`\n- `\"rb\"`\n- `\"up\"`\n- `\"down\"`\n- `\"left\"`\n- `\"right\"`"},"rotate":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"rotation"}],"description":"Apply a rotation to a 4x4 matrix uniform.`uniform` is the uniform name as a string.It is `\"MV\"` by default.`rotation` can be either a quaternion, oran angle (in radians) followed by an optional `vec3` axis.If the axis is omitted it is assumed to be `vec3(0, 0, 1)`so the rotation becomes a 2D rotation in the xy plane aboutthe z axis.Fields:\n- `rotation`: The rotation as a `quat`. Updatable.\n- `angle`: The rotation angle in radians. Updatable.\n- `axis`: The rotation axis as a `vec3`. Updatable.Default tag: `\"rotate\"`.Examples:\n```\n local node1 = am.rotate(math.rad(45))local node2 = am.rotate(math.pi/4, vec3(0, 1, 0))local node3 = am.rotate(\"MyModelViewMatrix\",    quat(math.pi/6, vec3(1, 0, 0)))node1.angle = math.rad(60)node2.axis = vec3(0, 0, 1)node3.rotation = quat(math.rad(60), vec3(0, 0, 1))\n```\n"},"transform":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"matrix"}],"description":"Pre-multiply a 4x4 matrix uniform by the given 4x4 matrix.`uniform` is the uniform name as a string (default is `\"MV\"`).Fields:\n- `mat`: The matrix to multiply the uniform by. Updatable.Default tag: `\"transform\"`."},"blend":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"mode"}],"description":"Set the blending mode.The possible values for `mode` are:\n- `\"off\"`\n- `\"alpha\"`\n- `\"premult\"`\n- `\"add\"`\n- `\"subtract\"`\n- `\"add_alpha\"`\n- `\"subtract_alpha\"`\n- `\"multiply\"`\n- `\"invert\"`Fields:\n- `mode`: Updatable."},"int_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns an `int_norm` view to a newly created buffer and fillsit with the values in the given table."},"int_array":{"type":"function","args":[{"name":"table"}],"description":"Returns an `int` view to a newly created buffer and fillsit with the values in the given table."},"byte_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `byte` view to a newly created buffer and fillsit with the values in the given table."},"ushort_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `ushort` view to a newly created buffer and fillsit with the values in the given table."},"tween":{"type":"function","args":[{"name":"target"},{"name":"time"},{"name":"values"},{"name":"ease"}],"description":"Returns an action that changes the values of one or more fields of `target` to new values overa given time period.`time` is in seconds.`values` is a table mapping field names to theirnew values.`ease` is an easing function. This function takesa value between 0 and 1 and returns a value between0 and 1. This determines the \"shape\" of the interpolationbetween the two values. If omitted a linear interpolationis used.\nThe following easing functions are pre-defined (though of course you candefine your own):\n- `am.ease.linear`\n- `am.ease.quadratic`\n- `am.ease.cubic`\n- `am.ease.hyperbola`\n- `am.ease.sine`\n- `am.ease.windup`\n- `am.ease.elastic`\n- `am.ease.bounce`\n- `am.ease.cubic_bezier(x1, y1, x2, y2)`: This returns a cubic  bezier ease function with the given control points.\n- `am.ease.out(f)`: This takes an existing ease function and  returns its reverse. E.g. if the existing ease function is  slow and then fast, the new one will be fast and then slow.\n- `am.ease.inout(f, g)`. This returns an ease function that  uses the ease function `f` for the first half of the transition  and `out(g)` for the second half.Tweening works with fields that arenumbers or vectors (`vec2`, `vec3` or `vec4`)."},"uint_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `uint_norm` view to a newly created buffer and fillsit with the values in the given table."},"controllers_present":{"type":"function","args":[{"name":""}],"description":"Returns a list of currently connected controller indexes."},"parse_json":{"type":"function","args":[{"name":"json"}],"description":"Converts the given JSON string to a Lua valueand returns it. If there was an error parsing the JSONthen `nil` is returned and the error message is returned asa second return value."},"ubyte_norm_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `ubyte_norm` view to a newly created buffer and fillsit with the values in the given table."},"controller_lt_val":{"type":"function","args":[{"name":"index"}],"description":"Returns the value of the left trigger axis of controller `index`.The returned value is between 0 and 1."},"controller_detached":{"type":"function","args":[{"name":"index"}],"description":"Returns `true` if controller `index` was removed since the last frame."},"base64_encode":{"type":"function","args":[{"name":"buffer"}],"description":"Returns a base64 encoding of a buffer as a string."},"controllers_detached":{"type":"function","args":[{"name":""}],"description":"Returns a list of controller indexes removed since the last frame."},"delay":{"type":"function","args":[{"name":"seconds"}],"description":"Returns an action that does nothing for the given numberof seconds."},"vec3_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `vec3` view to a newly created buffer and fillsit with the values in the given table.The table may contain either `vec3`s or numbers (though not a mix). If thetable contains numbers they are used for the vector components and theresulting view will have a third the number of elements as there arenumbers in the table."},"wait":{"type":"function","args":[{"name":"action"}],"description":"Waits for the given action to finish before continuing.This can only be called from within a coroutine.Example:\n```\n am.window{}.scene =\n    am.rect(-100, -100, 100, 0, vec4(1, 0, 0, 1))    :action(coroutine.create(function(node)        while true do            am.wait(am.tween(node, 1, {                color = vec4(0, 1, 0, 1),                y2 = 100            }))            am.wait(am.tween(node, 1, {                color = vec4(1, 0, 0, 1),                y2 = 0            }))        end    end))\n```\n"},"uint_elem_array":{"type":"function","args":[{"name":"table"}],"description":"Returns a `uint_elem` view to a newly created buffer and fillsit with the values in the given table."},"submit_gamecenter_achievement":{"type":"function","args":[{"name":"achievment_id"}],"description":"Submit an achievement."}}},"vec3":{"type":"function","returnTypes":[{"type":"ref","name":"vec3"}],"args":[{"name":"x"},{"name":"y"},{"name":"z"}]}}},"packagePath":"./?.lua,./?/init.lua","cwd":"./src","luaVersion":"5.1","namedTypes":{"vec4":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"q":{"type":"number"},"y":{"type":"number"},"g":{"type":"number"},"b":{"type":"number"},"s":{"type":"number"},"w":{"type":"number"},"r":{"type":"number"},"z":{"type":"number"},"a":{"type":"number"},"p":{"type":"number"}}},"node":{"type":"table","fields":{"hidden":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"description":"Determines whether the node and its children are rendered.The default is `false`, meaning that the node is rendered.Updatable."},"paused":{"type":"function","returnTypes":[{"type":"ref","name":"node"}]},"prepend":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"child"}],"description":"Adds `child` to the start of `node`'s child list and returns `node`."},"remove_all":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":""}],"description":"Removes all of `node`'s children and returns `node`."},"num_children":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"description":"Returns the node's child count.Readonly."},"recursion_limit":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"description":"This determines the number of times the node will be renderedrecursively when part of a cycle in the scene graph.The default is 8.Updatable."},"remove":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"tagname"}],"description":"Searches for a node with tag `tagname` in the descendentsof `node` and removes the first one it finds.Then returns `node`."},"child_pairs":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":""}],"description":"Returns an iterator over all `node`'s children. For example:\n```\n for i, child in node:child_pairs() do\n    -- do something with childend\n```\n"},"child":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"n"}],"description":"Returns the nth child of `node` (or `nil` if there is no such child)."},"replace":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"tagname"},{"name":"replacement"}],"description":"Searches for a node with tag `tagname` in the descendentsof `node` and replaces the first one it finds with`replacement`. Then returns `node`."},"append":{"type":"function","returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"child"}],"description":"Appends `child` to the end of `node`'s child list and returns `node`."}}},"vec2":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"s":{"type":"number"},"y":{"type":"number"},"r":{"type":"number"},"g":{"type":"number"}}},"window":{"type":"table","fields":{"clear_color":{"type":"function"},"touch_ended":{"type":"function","args":[{"name":"touch"}],"description":"Returns true if the specific touch ended since the last frame."},"scene":{"type":"function","description":"The scene node currently attached to the window.This scene will be rendered to the window each frame.Updatable."},"left":{"type":"function","description":"The x coordinate of the left edge of the window in the window's default coordinate system.Readonly."},"lock_pointer":{"type":"function"},"touch_norm_delta":{"type":"function","args":[{"name":"touch"}],"description":"Returns the change in touch position since thelast frame in normalized device coordinates (a `vec2`)."},"bottom":{"type":"function","description":"The y coordinate of the bottom edge of the window, in the window'sdefault coordinate system.Readonly."},"touch_began":{"type":"function","args":[{"name":"touch"}],"description":"Returns true if the specific touch began since the last frame."},"mouse_down":{"type":"function","args":[{"name":"button"}],"description":"Returns `true` if the given button was downat the start of the frame. `button` may be `\"left\"`,`\"right\"` or `\"middle\"`."},"mouse_norm_delta":{"type":"function","args":[{"name":""}],"description":"Returns the change in mouse position since the last frame, innormalized device coordinates (a `vec2`)."},"mouse_pressed":{"type":"function","args":[{"name":"button"}],"description":"Returns `true` if the given mouse button's state changedfrom up to down since thelast frame.`button` may be `\"left\"`, `\"right\"` or `\"middle\"`.Note that if `mouse_pressed` returns `true` then`mouse_down` will also return `true`. Also if `mouse_pressed` returns `true` then `mouse_released`will always return `false`. (If necessary, Amulet willpostpone button release events to the next frame to ensure this.)"},"mouse_norm_position":{"type":"function","args":[{"name":""}],"description":"Returns the position of the mouse cursor in normalized device coordinates,as a `vec2`."},"right":{"type":"function","description":"The x coordinate of the right edge of the window, in the window'sdefault coordinate system.Readonly."},"pixel_height":{"type":"function","description":"The real height of the window in pixelsReadonly."},"top":{"type":"function","description":"The y coordinate of the top edge of the window, in the window'sdefault coordinate system.Readonly."},"resized":{"type":"function","args":[{"name":""}],"description":"Returns true if the window's size changed since the last frame."},"touch_pixel_delta":{"type":"function","args":[{"name":"touch"}],"description":"Returns the change in touch position since thelast frame in pixels (a `vec2`)."},"mouse_wheel_delta":{"type":"function","args":[{"name":""}],"description":"Returns the change in mouse scroll wheel position since thelast frame (a `vec2`)."},"pixel_width":{"type":"function","description":"The real width of the window in pixels.Readonly."},"touch_delta":{"type":"function","args":[{"name":"touch"}],"description":"Returns the change in touch position since thelast frame in the window's coordinate system (a `vec2`)."},"touch_pixel_position":{"type":"function","args":[{"name":"touch"}],"description":"Returns the last touch position in pixels, where the bottom leftcorner of the window is (0, 0) (a `vec2`)."},"key_released":{"type":"function","args":[{"name":"key"}],"description":"Returns true if the given key's state changed from downto up since the last frame."},"mouse_released":{"type":"function","args":[{"name":"button"}],"description":"Returns true if the given mouse button's state changedfrom down to up since the last frame.`button` may be `\"left\"`, `\"right\"` or `\"middle\"`.Note that if `mouse_released` returns `true` then`mouse_down` will also return `false`. Also if `mouse_released` returns `true` then `mouse_pressed`will always return `false`. (If necessary, Amulet willpostpone button press events to the next frame to ensure this.)"},"projection":{"type":"function"},"touches_began":{"type":"function","args":[{"name":""}],"description":"Returns an array of the touches that began since the last frame.Each touch is an integer and each time a new touchoccurs the lowest available integer greater than or equal to 1 is assigned tothe touch.If there are no other active touches then the next touchwill always be 1, so if your interface only expects a singletouch at a time, you can just use 1 for all touch functionsthat take a touch argument and any additional touches will beignored."},"key_pressed":{"type":"function","args":[{"name":"key"}],"description":"Returns true if the given key's state changed from upto down since the last frame."},"touch_norm_position":{"type":"function","args":[{"name":"touch"}],"description":"Returns the last touch position in normalized device coordinates(a `vec2`)."},"touch_position":{"type":"function","args":[{"name":"touch"}],"description":"Returns the last touch position in the window's coordinate system(a `vec2`)."},"mouse_pixel_delta":{"type":"function","args":[{"name":""}],"description":"Returns the change in mouse position since the last frame, inpixels (a `vec2`)."},"active_touches":{"type":"function","args":[{"name":""}],"description":"Returns an array of the currently active touches."},"close":{"type":"function","args":[{"name":""}],"description":"Closes the window and quits the application if this wasthe only window."},"height":{"type":"function","description":"The height of the window in the window's default coordinate space.This will always be equal to the `height` setting suppliedwhen the window was created if the `letterbox` setting isenabled. Otherwise it may be larger, but it will never besmaller than the `height` setting.Readonly."},"mouse_wheel":{"type":"function","args":[{"name":""}],"description":"Returns the mouse scroll wheel position (a `vec2`)."},"letterbox":{"type":"function"},"key_down":{"type":"function","args":[{"name":"key"}],"description":"Returns true if the given key was down at the start of thecurrent frame.The possible values for `key` are:\n- `\"a\"`\n- `\"b\"`\n- `\"c\"`\n- `\"d\"`\n- `\"e\"`\n- `\"f\"`\n- `\"g\"`\n- `\"h\"`\n- `\"i\"`\n- `\"j\"`\n- `\"k\"`\n- `\"l\"`\n- `\"m\"`\n- `\"n\"`\n- `\"o\"`\n- `\"p\"`\n- `\"q\"`\n- `\"r\"`\n- `\"s\"`\n- `\"t\"`\n- `\"u\"`\n- `\"v\"`\n- `\"w\"`\n- `\"x\"`\n- `\"y\"`\n- `\"z\"`\n- `\"1\"`\n- `\"2\"`\n- `\"3\"`\n- `\"4\"`\n- `\"5\"`\n- `\"6\"`\n- `\"7\"`\n- `\"8\"`\n- `\"9\"`\n- `\"0\"`\n- `\"enter\"`\n- `\"escape\"`\n- `\"backspace\"`\n- `\"tab\"`\n- `\"space\"`\n- `\"minus\"`\n- `\"equals\"`\n- `\"leftbracket\"`\n- `\"rightbracket\"`\n- `\"backslash\"`\n- `\"semicolon\"`\n- `\"quote\"`\n- `\"backquote\"`\n- `\"comma\"`\n- `\"period\"`\n- `\"slash\"`\n- `\"capslock\"`\n- `\"f1\"`\n- `\"f2\"`\n- `\"f3\"`\n- `\"f4\"`\n- `\"f5\"`\n- `\"f6\"`\n- `\"f7\"`\n- `\"f8\"`\n- `\"f9\"`\n- `\"f10\"`\n- `\"f11\"`\n- `\"f12\"`\n- `\"printscreen\"`\n- `\"scrolllock\"`\n- `\"pause\"`\n- `\"insert\"`\n- `\"home\"`\n- `\"pageup\"`\n- `\"delete\"`\n- `\"end\"`\n- `\"pagedown\"`\n- `\"right\"`\n- `\"left\"`\n- `\"down\"`\n- `\"up\"`\n- `\"kp_divide\"`\n- `\"kp_multiply\"`\n- `\"kp_minus\"`\n- `\"kp_plus\"`\n- `\"kp_enter\"`\n- `\"kp_1\"`\n- `\"kp_2\"`\n- `\"kp_3\"`\n- `\"kp_4\"`\n- `\"kp_5\"`\n- `\"kp_6\"`\n- `\"kp_7\"`\n- `\"kp_8\"`\n- `\"kp_9\"`\n- `\"kp_0\"`\n- `\"kp_period\"`\n- `\"lctrl\"`\n- `\"lshift\"`\n- `\"lalt\"`\n- `\"lgui\"`\n- `\"rctrl\"`\n- `\"rshift\"`\n- `\"ralt\"`\n- `\"rgui\"`"},"mouse_pixel_position":{"type":"function","args":[{"name":""}],"description":"Returns the position of the mouse cursor in pixels where the bottom leftcorner of the window has coordinate (0, 0), as a `vec2`."},"mouse_delta":{"type":"function","args":[{"name":""}],"description":"Returns the change in mouse position since the last frame, inthe window's coordinate system (a `vec2`)."},"touches_ended":{"type":"function","args":[{"name":""}],"description":"Returns an array of the touches that ended since the last frame."},"width":{"type":"function","description":"The width of the window in the window's default coordinate system.This will always be equal to the `width` setting suppliedwhen the window was created if the `letterbox` setting isenabled. Otherwise it may be larger, but it will never besmaller than the `width` setting.Readonly."},"mode":{"type":"function"},"keys_down":{"type":"function","args":[{"name":""}],"description":"Returns an array of the keys that were down at thestart of the current frame."},"mouse_position":{"type":"function","args":[{"name":""}],"description":"Returns the position of the mouse cursor, as a `vec2`,in the window's coordinate system."}}},"vec3":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"y":{"type":"number"},"g":{"type":"number"},"b":{"type":"number"},"s":{"type":"number"},"r":{"type":"number"},"z":{"type":"number"},"p":{"type":"number"}}},"buffer":{"type":"table","fields":{"view":{"type":"function","args":[{"name":"type"},{"name":"offset"},{"name":"stride"},{"name":"count"}],"description":"Returns a view into `buffer`.`type` can be one of the following:type                    size (bytes)  Lua value range             internal range            endianess\n--------------------   -------------  --------------------------- ------------------------  -----------\n`\"float\"`                          4  approx -3.4e38 to 3.4e38    same                      native`\"vec2\"`                           8  any `vec2`                  same                      native`\"vec3\"`                          12  any `vec3`                  same                      native`\"vec4\"`                          16  any `vec4`                  same                      native\n`\"byte\"`                           1  -128 to 127                 same                      N/A`\"ubyte\"`                          1  0 to 255                    same                      N/A\n`\"byte_norm\"`                      1  -1.0 to 1.0                 -127 to 127               N/A`\"ubyte_norm\"`                     1  0.0 to 1.0                  0 to 255                  N/A\n`\"short\"`                          2  -32768 to 32767             same                      native`\"ushort\"`                         2  0 to 65535                  same                      native\n`\"short_norm\"`                     2  -1.0 to 1.0                 -32767 to 32767           native`\"ushort_norm\"`                    2  0.0 to 1.0                  0 to 65535                native`\"ushort_elem\"`                    2  1 to 65536                  0 to 65535                native\n`\"int\"`                            4  -2147483648 to 2147483647   same                      native`\"uint\"`                           4  0 to 4294967295             same                      native`\"uint_elem\"`                      4  1 to 4294967296             0 to 4294967295           native\nThe `_norm` types map Lua numbers in the range -1 to 1(or 0 to 1 for unsigned types) to integer values in the buffer.The `_elem` types are specifically for element array buffers andoffset the Lua numbers by 1 to conform to the Lua convention of array indices starting at 1.All view types currently use the native platform endianess, which happens\nto be little-endian on all currently supported platforms.The `offset` argument is the byte offset of the first element of theview. The default is 0.The `stride` argument is the distance between consecutive values in theview, in bytes. The default is the size of the view type.The `count` argument determines the number of elements in the view.The underlying buffer must be large enough to accommodate theelements with the given stride. The default is the maximum supported by thebuffer with the given stride.You can read and write to views as if they were Lua arrays (as with Luaarrays, indices start at 1). For example:\n```\n local buf = am.buffer(12)local view = buf:view(\"float\")view[1] = 1.5 view[2] = view[1] + 2\n```\nAttempting to read an index less than 1 or larger than the number of elementswill return nil."}}}}}