{"global":{"type":"table","fields":{"vec4":{"type":"function","returnTypes":[{"type":"ref","name":"vec4"}],"args":[{"name":"x"},{"name":"y"},{"name":"z"},{"name":"w"}]},"quat":{"type":"function"},"mat4":{"type":"function"},"mat3":{"type":"function"},"table":{"type":"table","fields":{"merge":{"args":[{"name":"t1"},{"name":"t2"}],"type":"function","argsDisplayOmitSelf":"t1, t2","argsDisplay":"t1, t2","description":"Sets all the key-value pairs from `t2` in `t1`. "},"keys":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Returns an array of `t`'s keys. "},"append":{"args":[{"name":"arr1"},{"name":"arr2"}],"type":"function","argsDisplayOmitSelf":"arr1, arr2","argsDisplay":"arr1, arr2","description":"Inserts all of `arr2`'s values at the end of `arr1`. "},"remove_all":{"args":[{"name":"arr"},{"name":"elem"}],"type":"function","argsDisplayOmitSelf":"arr, elem","argsDisplay":"arr, elem","description":"Remove all values equal to `elem` from `arr`. "},"search":{"args":[{"name":"arr"},{"name":"elem"}],"type":"function","argsDisplayOmitSelf":"arr, elem","argsDisplay":"arr, elem","description":"Return the index of `elem` in `arr` or nil if it's not found. "},"filter":{"args":[{"name":"arr"},{"name":"f"}],"type":"function","argsDisplayOmitSelf":"arr, f","argsDisplay":"arr, f","description":"Returns a new array which contains only the values from `arr` for which `f(elem)` returns true (or any value besides `nil` or `false`). "},"shuffle":{"args":[{"name":"t"},{"name":"rand"}],"type":"function","argsDisplayOmitSelf":"t [,rand]","argsDisplay":"t [,rand]","description":"Randomly rearranges the values of `t`.  The optional `rand` argument should be a function where `rand(n)` returns an integer between 1 and n (like `math.random`). By default `math.random` is used. "},"tostring":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Converts a table to a string. The returned string is a valid Lua table literal. "},"values":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Returns an array of `t`'s values. "},"deep_copy":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Returns a deep copy of `t` (all `t`'s keys and values are copied recursively). Cycles are detected and reproduced in the new table. "},"count":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Returns the total number of pairs in the table."},"clear":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Remove all `t`'s pairs. "},"shallow_copy":{"args":[{"name":"t"}],"type":"function","argsDisplayOmitSelf":"t","argsDisplay":"t","description":"Returns a shallow copy of `t` (i.e. a new table with the same keys and values as `t`). "}}},"noglobals":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Prevents the creation of new global variables. An error will be raised if a new global is created after this call, or if an attempt is made to read a nil global. "},"mat2":{"type":"function"},"log":{"args":[{"name":"msg"},{"name":"..."}],"type":"function","argsDisplayOmitSelf":"msg, ...","argsDisplay":"msg, ...","description":"Log a message to the console. The message will also appear in an overlay on the main window.  `msg` may contain format specifiers like the standard Lua `string.format` function.  The logged messages are prefixed with the file name and line number where `log` was called.  Example: \n```\n  log(\"here\") log(\"num = %g, string = %s\", 1, \"two\")\n```\n "},"vec2":{"type":"function","returnTypes":[{"type":"ref","name":"vec2"}],"args":[{"name":"x"},{"name":"y"}]},"following easing functions are pre-defined ":{"type":"function","description":"\n- `am.ease.linear`\n- `am.ease.quadratic`\n- `am.ease.cubic`\n- `am.ease.hyperbola`\n- `am.ease.sine`\n- `am.ease.windup`\n- `am.ease.elastic`\n- `am.ease.bounce`\n- `am.ease.cubic_bezier(x1, y1, x2, y2)`: This returns a cubic   bezier ease function with the given control points.\n- `am.ease.out(f)`: This takes an existing ease function and   returns its reverse. E.g. if the existing ease function is   slow and then fast, the new one will be fast and then slow.\n- `am.ease.inout(f, g)`. This returns an ease function that   uses the ease function `f` for the first half of the transition   and `out(g)` for the second half.  Tweening works with fields that are numbers or vectors (`vec2`, `vec3` or `vec4`)."},"math":{"type":"table","fields":{"oblique":{"args":[{"name":"angle"},{"name":"zscale"},{"name":"left"},{"name":"right"},{"name":"bottom"},{"name":"top"},{"name":"near"},{"name":"far"}],"type":"function","argsDisplayOmitSelf":"angle, zscale, left, right, bottom, top [, near, far]","argsDisplay":"angle, zscale, left, right, bottom, top [, near, far]","description":"Creates a 4x4 oblique projection matrix. `near` and `far` are the distance from the viewer of the near and far clipping plains (negative means behind the viewer).\nTheir default values are `-1` and `1`.  "},"perspective":{"args":[{"name":"fovy"},{"name":"aspect"},{"name":"near"},{"name":"far"}],"type":"function","argsDisplayOmitSelf":"fovy, aspect, near, far","argsDisplay":"fovy, aspect, near, far","description":"Creates a 4x4 matrix for a symmetric perspective-view frustum. \n-   `fovy` is the field of view in the y plain, in radians.\n-   `aspect` is typically the window width divided by its height.\n-   `near` and `far` are the distances of the near and far clipping     plains from the camera (these should be positive). "},"fract":{"args":[{"name":"v"}],"type":"function","argsDisplayOmitSelf":"v","argsDisplay":"v","description":"Returns the fractional part of `v`. If `v` is a vector it returns a vector of the same size with each component being the fractional part of the corresponding component in the original vector. "},"scale4":{"args":[{"name":"scaling"}],"type":"function","argsDisplayOmitSelf":"scaling","argsDisplay":"scaling","description":"Creates a 4x4 scale matrix.  `scaling` may be 1, 2 or 3 numbers or a `vec2` or `vec3`. If 1 number is provided it is assume to be the x and y components of the scaling and the z scaling is assumed to be 1. If 2 numbers or a `vec2` is provided, they are the scaling for the x and y components and z is assumed to be 1. "},"slerp":{"args":[{"name":"from"},{"name":"to"},{"name":"t"}],"type":"function","argsDisplayOmitSelf":"from, to, t","argsDisplay":"from, to, t","description":"Returns the spherical linear interpolation of the two quaternions `from` and `to`. `t` should be a number between 0 and 1."},"distance":{"args":[{"name":"vector1"},{"name":"vector2"}],"type":"function","argsDisplayOmitSelf":"vector1, vector2","argsDisplay":"vector1, vector2","description":"Returns the distance between two vectors. "},"randvec3":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a `vec3` with all components set to a random number between 0 and 1. "},"simplex":{"args":[{"name":"pos"}],"type":"function","argsDisplayOmitSelf":"pos","argsDisplay":"pos","description":"Generate simplex noise. `pos` can be a 2, 3, or 4 dimensional vector, or a number. \nThe returned value is between -1 and 1. "},"mix":{"args":[{"name":"from"},{"name":"to"},{"name":"t"}],"type":"function","argsDisplayOmitSelf":"from, to, t","argsDisplay":"from, to, t","description":"Returns the linear interpolation between `from` and `to` determined by `t`. `from` and `to` can be numbers or vectors, and must be the same type. `t` should be a number between 0 and 1. `from` and `to` can also be quaternions. In this case `math.mix` returns the spherical linear interpolation of the two quaternions. "},"perlin":{"args":[{"name":"pos"},{"name":"period"}],"type":"function","argsDisplayOmitSelf":"pos [, period]","argsDisplay":"pos [, period]","description":"Generate perlin noise. `pos` can be a 2, 3, or 4 dimensional vector, or a number. If the second argument is supplied then the noise will be periodic with the given period. `period` should be of the same type as `pos` and its components should be integers greater than 1. \nThe returned value is between -1 and 1. "},"dot":{"args":[{"name":"vector1"},{"name":"vector2"}],"type":"function","argsDisplayOmitSelf":"vector1, vector2","argsDisplay":"vector1, vector2","description":"Returns the dot product of two vectors. The vectors must have the same size. "},"lookat":{"args":[{"name":"eye"},{"name":"center"},{"name":"up"}],"type":"function","argsDisplayOmitSelf":"eye, center, up","argsDisplay":"eye, center, up","description":"Creates a 4x4 view matrix at `eye`, looking in the direction of `center` with the y axis of the camera pointing in the same direction as `up`. "},"randvec4":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a `vec4` with all components set to a random number between 0 and 1. "},"rotate4":{"args":[{"name":"rotation"}],"type":"function","argsDisplayOmitSelf":"rotation","argsDisplay":"rotation","description":"Creates a 4x4 rotation matrix.  `rotation` can be either a quaternion, or an angle (in radians) followed by an optional `vec3` axis. If the axis is omitted it is assumed to be `vec3(0, 0, 1)` so the rotation becomes a 2D rotation in the xy plane about the z axis. "},"translate4":{"args":[{"name":"position"}],"type":"function","argsDisplayOmitSelf":"position","argsDisplay":"position","description":"Creates a 4x4 translation matrix.  `position` may be either 2 or 3 numbers (the x, y and z components) or a `vec2` or `vec3`.   If the z component is omitted it is assumed to be 0. "},"ortho":{"args":[{"name":"left"},{"name":"right"},{"name":"bottom"},{"name":"top"},{"name":"near"},{"name":"far"}],"type":"function","argsDisplayOmitSelf":"left, right, bottom, top [, near, far]","argsDisplay":"left, right, bottom, top [, near, far]","description":"Creates a 4x4 orthographic projection matrix. `near` and `far` are the distance from the viewer of the near and far clipping plains (negative means behind the viewer).\nTheir default values are `-1` and `1`. "},"cross":{"args":[{"name":"vector1"},{"name":"vector2"}],"type":"function","argsDisplayOmitSelf":"vector1, vector2","argsDisplay":"vector1, vector2","description":"Returns the cross product of two 3 dimensional vectors. "},"inverse":{"args":[{"name":"matrix"}],"type":"function","argsDisplayOmitSelf":"matrix","argsDisplay":"matrix","description":"Returns the inverse of a matrix. "},"sign":{"args":[{"name":"n"}],"type":"function","argsDisplayOmitSelf":"n","argsDisplay":"n","description":"Returns +1 if n > 0, -1 if n < 0 and 0 if n == 0. "},"length":{"args":[{"name":"vector"}],"type":"function","argsDisplayOmitSelf":"vector","argsDisplay":"vector","description":"Returns the length of a vector. "},"clamp":{"args":[{"name":"v"},{"name":"min"},{"name":"max"}],"type":"function","argsDisplayOmitSelf":"v, min, max","argsDisplay":"v, min, max","description":"Clamps a value `v` between `min` and `max`. `v`, `min` and `max` may be vectors. In this case each component is clamped based on the corresponding components in `min` and `max`. "},"randvec2":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a `vec2` with all components set to a random number between 0 and 1. "},"normalize":{"args":[{"name":"vector"}],"type":"function","argsDisplayOmitSelf":"vector","argsDisplay":"vector","description":"Returns the normalized form of a vector (i.e. the vector that points in the same direction, but whose length is 1). If the given vector has zero length, then a vector of the same size is returned whose first component is 1 and whose remaining components are 0. "}}},"am":{"type":"table","fields":{"controller_button_released":{"args":[{"name":"index"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"index, button","argsDisplay":"index, button","description":"Returns `true` if the given button of controller `index` was released since the last frame."},"version":{"type":"other","description":"The current Amulet version, as a string. E.g. `\"1.0.3\"`. "},"parallel":{"args":[{"name":"actions"}],"type":"function","argsDisplayOmitSelf":"actions","argsDisplay":"actions","description":"Returns an action that runs the given array of actions all at the same time. The returned action finishes once all the actions in the array are finished. "},"delta_time":{"type":"other","description":"This contains the amount of time that lapsed between the start of the current frame and the start of the previous frame, in seconds. "},"line":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"point1"},{"name":"point2"},{"name":"thickness"},{"name":"color"}],"type":"function","argsDisplayOmitSelf":"point1, point2 [, thickness [, color]]","argsDisplay":"point1, point2 [, thickness [, color]]","description":"Draws a line from `point1` to `point2`.  `point1` and `point1` should be `vec2`s.  `thickness` should be a number. The default is 1.  `color` should be a `vec4`. The default is white.  Fields: \n- `point1`: Updatable.\n- `point2`: Updatable.\n- `thickness`: Updatable.\n- `color`: Updatable.  Default tag: `\"line\"`. "},"ubyte_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `ubyte` view to a newly created buffer and fills it with the values in the given table. "},"ushort_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `ushort_norm` view to a newly created buffer and fills it with the values in the given table. "},"audio_buffer":{"args":[{"name":"buffer"},{"name":"channels"},{"name":"sample_rate"}],"type":"function","argsDisplayOmitSelf":"buffer, channels, sample_rate","argsDisplay":"buffer, channels, sample_rate","description":"Returns a new audio buffer using the given raw buffer (a buffer"},"init_gamecenter":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Initialize Game Center. This must be called before any other Game Center functions. "},"float_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `float` view to a newly created buffer and fills it with the values in the given table. "},"translate":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"position"}],"type":"function","argsDisplayOmitSelf":"[uniform,] position","argsDisplay":"[uniform,] position","description":"Apply a translation to a 4x4 matrix uniform. `uniform` is the uniform name as a string. It is `\"MV\"` by default.  `position` may be either 2 or 3 numbers (the x, y and z components) or a `vec2` or `vec3`.  If the z component is omitted it is assumed to be 0.  Fields: \n- `position`: The translation position as a `vec3`. Updatable.\n- `position2d`: The translation position as a `vec2`. Updatable.\n- `x`, `y`, `z`: The `x`, `y` and `z` components of the position. Updatable.  Default tag: `\"translate\"`.  Examples: \n```\n  local node1 = am.translate(10, 20) local node2 = am.translate(vec2(10, 20))\nlocal node3 = am.translate(\"MyModelViewMatrix\", 1, 2, -3.5) local node4 = am.translate(vec3(1, 2, 3)) node1.position2d = vec2(30, 40) node2.x = 40 node2.y = 50\nnode3.position = vec3(1, 2, -3)\n```\n "},"cull_sphere":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniforms..."},{"name":"radius"},{"name":"center"}],"type":"function","argsDisplayOmitSelf":"[uniforms...,] radius [, center]","argsDisplay":"[uniforms...,] radius [, center]","description":"This first takes the matrix product of the given uniforms (which should be `mat4`s). Then it determines whether the sphere with the given center and radius would be visible using the previously computed matrix\nproduct as the model-view-projection matrix. If it wouldn't be visible then none of this node's children are rendered (i.e. they are culled).  The default value for `uniforms` is `\"P\" and \"MV\"` and the default value for `center` is `vec3(0)`.  Fields: \n- `radius`: Updatable.\n- `center`: Updatable.  Default tag: `\"cull_sphere\"`. "},"perf_stats":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a table with the following fields: \n- `avg_fps`: frames per second averaged over the last 60 frames\n- `min_fps`: the minimum frames per second over the last 60 frames\n- `frame_draw_calls`: the number of `draw` calls in the last frame\n- `frame_use_program_calls`: the number of `use_program` calls in the last frame "},"decode_png":{"args":[{"name":"buffer"}],"type":"function","argsDisplayOmitSelf":"buffer","argsDisplay":"buffer","description":"Converts the raw buffer, which should be a png encoding of an image, into an image buffer. "},"struct_array":{"args":[{"name":"size"},{"name":"spec"}],"type":"function","argsDisplayOmitSelf":"size, spec","argsDisplay":"size, spec","description":"Returns a table of views of the given `size` as defined by `spec`. `spec` is a sequence of view name (a string) and view type (also a string) pairs. The returned table can be passed directly"},"submit_gamecenter_score":{"args":[{"name":"leaderboard_id"},{"name":"score"}],"type":"function","argsDisplayOmitSelf":"leaderboard_id, score","argsDisplay":"leaderboard_id, score","description":"Submit a score to a leaderboard. Note that Game Center accepts only integer scores. "},"load_audio":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"Loads the given audio file and returns a new audio buffer. The file must be a `.ogg` audio file. Returns `nil` if the file was not found. "},"language":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns the user's preferred ISO 639-1 language code in lower case(e.g. `\"en\"`),\npossibly followed by a dash and an ISO 3166-1 coutry code in upper case (e.g. `\"fr-CA\"`). The returned value will be one of the languages listed in"},"controllers_attached":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a list of controller indexes attached since the last frame. "},"sprite":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"source"},{"name":"color"},{"name":"halign"},{"name":"valign"}],"type":"function","argsDisplayOmitSelf":"source [, color] [, halign [, valign]]","argsDisplay":"source [, color] [, halign [, valign]]","description":"Renders a sprite (an image).  `source` can be either a filename, an ASCII art string or a *sprite spec*.  When `source` is a filename, that file is loaded and displayed as the sprite. Currently only `.png` and `.jpg` files are supported. Note that loaded files are cached, so each file will only be loaded once.  `source` may also be an ASCII art string. This is a string with at least one newline character. Each row in the string represents a row of pixels. Here's an example: \n```\n  local face = [[ ..YYYYY.. .Y.....Y. Y..B.B..Y Y.......Y Y.R...R.Y Y..RRR..Y .Y.....Y. ..YYYYY.. ]] am.window{}.scene = am.scale(20) ^ am.sprite(face)\n```\n  The resulting image looks like this:  ![face](images/face.png)  The mapping from characters to colors is determined by the `am.ascii_color_map` table. By default this is defined as: \n```\n  am.ascii_color_map = {\n    W = vec4(1, 1, 1, 1),          -- full white\n    w = vec4(0.75, 0.75, 0.75, 1), -- silver\n    K = vec4(0, 0, 0, 1),          -- full black\n    k = vec4(0.5, 0.5, 0.5, 1),    -- dark grey\n    R = vec4(1, 0, 0, 1),          -- full red\n    r = vec4(0.5, 0, 0, 1),        -- half red (maroon)\n    Y = vec4(1, 1, 0, 1),          -- full yellow\n    y = vec4(0.5, 0.5, 0, 1),      -- half yellow (olive)\n    G = vec4(0, 1, 0, 1),          -- full green\n    g = vec4(0, 0.5, 0, 1),        -- half green\n    C = vec4(0, 1, 1, 1),          -- full cyan\n    c = vec4(0, 0.5, 0.5, 1),      -- half cyan (teal)\n    B = vec4(0, 0, 1, 1),          -- full blue\n    b = vec4(0, 0, 0.5, 1),        -- half blue (navy)\n    M = vec4(1, 0, 1, 1),          -- full magenta\n    m = vec4(0.5, 0, 0.5, 1),      -- half magenta\n    O = vec4(1, 0.5, 0, 1),        -- full orange\n    o = vec4(0.5, 0.25, 0, 1),     -- half orange (brown) }\n```\n  but you can modify it as you please (though this must be done before creating a sprite).  Any characters not in the color map will come out as transparent pixels, except for space characters which are ignored.  The third kind of source is a *sprite spec*."},"controller_button_down":{"args":[{"name":"index"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"index, button","argsDisplay":"index, button","description":"Returns `true` if the given button of controller `index` was down at the start of the current frame."},"vec4_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `vec4` view to a newly created buffer containing the values in the given table.  The table may contain either `vec4`s or numbers (though not a mix). If the table contains numbers they are used for the vector components and the resulting view will have a quarter the number of elements as there are numbers in the table. "},"short_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `short` view to a newly created buffer and fills it with the values in the given table. "},"controller_rstick_pos":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns the position of the left stick of controller `index` as a `vec2`. The position values range\nfrom -1 to 1 in both the x and y components. Negative x means left and negative y means down. "},"byte_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `byte_norm` view to a newly created buffer and fills it with the values in the given table. "},"base64_decode":{"args":[{"name":"string"}],"type":"function","argsDisplayOmitSelf":"string","argsDisplay":"string","description":"Converts a base64 string to a buffer. "},"short_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `short_norm` view to a newly created buffer and fills it with the values in the given table. "},"eval_js":{"args":[{"name":"js"}],"type":"function","argsDisplayOmitSelf":"js","argsDisplay":"js","description":"Runs the given JavaScript string and returns the result as a Lua value. JavaScript objects and arrays are converted to Lua tables and other JavaScript types are converted to the corresponding Lua types. `undefined` is converted to `nil`.  This function only works when running in a browser. On other platforms it has no effect and always returns `nil`. "},"series":{"args":[{"name":"actions"}],"type":"function","argsDisplayOmitSelf":"actions","argsDisplay":"actions","description":"Returns an action that runs the given array of actions one after another. "},"controller_attached":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns `true` if controller `index` was attached since the last frame. "},"sfxr_synth":{"args":[{"name":"settings"}],"type":"function","argsDisplayOmitSelf":"settings","argsDisplay":"settings","description":"Returns an audio buffer containing a generated sound effect.  `settings` can either be a table containing any number of the following fields:  Field                Default value     Notes\n-----------------    ----------------  ------------------------------------------------- `wave_type     `     `\"square\"`        Can also be `\"sawtooth\"`, `\"sine\"` or `\"noise\"` `base_freq     `     `0.3` `freq_limit    `     `0.0` `freq_ramp     `     `0.0` `freq_dramp    `     `0.0` `duty          `     `0.0` `duty_ramp     `     `0.0` `vib_strength  `     `0.0` `vib_speed     `     `0.0` `vib_delay     `     `0.0` `env_attack    `     `0.0` `env_sustain   `     `0.3` `env_decay     `     `0.4` `env_punch     `     `0.0` `filter_on     `     `false` `lpf_resonance `     `0.0` `lpf_freq      `     `1.0` `lpf_ramp      `     `0.0` `hpf_freq      `     `0.0` `hpf_ramp      `     `0.0` `pha_offset    `     `0.0` `pha_ramp      `     `0.0` `repeat_speed  `     `0.0` `arp_speed     `     `0.0` `arp_mod       `     `0.0`  or a numeric seed. Use the sfxr example in the [online editor](http://www.amulet.xyz/editor.html) to generate seeds. "},"controller_rt_val":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns the value of the right trigger axis of controller `index`. The returned value is between 0 and 1. "},"framebuffer":{"args":[{"name":"texture"},{"name":"depth_buf"},{"name":"stencil_buf"}],"type":"function","argsDisplayOmitSelf":"texture [, depth_buf [, stencil_buf]]","argsDisplay":"texture [, depth_buf [, stencil_buf]]","description":"Creates framebuffer with the given texture attached.  `depth_buf` and `stencil_buf` determine whether the framebuffer has a depth and/or stencil buffer. These should be `true` or `false` (default is `false`). "},"controller_lstick_pos":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns the position of the left stick of controller `index` as a `vec2`. The position values range\nfrom -1 to 1 in both the x and y components. Negative x means left and negative y means down. "},"load_script":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"Loads the Lua script in `filename` and returns a function that, when called, will run the script. If the file doesn't exist `nil` is returned. "},"circle":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"center"},{"name":"radius"},{"name":"color"},{"name":"sides"}],"type":"function","argsDisplayOmitSelf":"center, radius [, color [, sides]]","argsDisplay":"center, radius [, color [, sides]]","description":"Draws a circle or regular polygon.  `center` should be a `vec2`.  `color` should be a `vec4`. The default is white.  `sides` is the number of sides to use when rendering the circle. The default is 255. You can change this to make other regular polygons. For example change it to 6 to draw a hexagon.  Fields: \n- `center`: The circle center as a `vec2`. Updatable.\n- `radius`: The circle radius. Updatable.\n- `color`: The circle color as a `vec4`. Updatable.  Default tag: `\"circle\"`. "},"uint_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `uint_norm` view to a newly created buffer and fills it with the values in the given table. "},"depth_test":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"func"},{"name":"mask"}],"type":"function","argsDisplayOmitSelf":"func [, mask]","argsDisplay":"func [, mask]","description":"Sets the depth test function and mask. The window or framebuffer being rendered to needs to have a depth buffer for this to have any effect.  `func` is used to determine whether a fragment is rendered by comparing the depth value of the fragment to the value in the depth buffer. The possible values for `func` are: \n- `\"never\"`\n- `\"always\"`\n- `\"equal\"`\n- `\"notequal\"`\n- `\"less\"`\n- `\"lequal\"`\n- `\"greater\"`\n- `\"gequal\"`  `mask` determines whether the fragment depth is written to the depth buffer. The possible values are `true` and `false`. The default is `true`.  Fields: \n- `func`: Updatable.\n- `mask`: Updatable.  Default tag: `\"depth_test\"`. "},"bind":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"bindings"}],"type":"function","argsDisplayOmitSelf":"bindings","argsDisplay":"bindings"},"uint_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `uint` view to a newly created buffer and fills it with the values in the given table. "},"ushort_elem_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `ushort_elem` view to a newly created buffer and fills it with the values in the given table. "},"vec2_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `vec2` view to a newly created buffer and fills it with the values in the given table.  The table may contain either `vec2`s or numbers (though not a mix). If the table contains numbers they are used for the vector components and the resulting view will have half the number of elements as there are numbers in the table. "},"billboard":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"preserve_scaling"}],"type":"function","argsDisplayOmitSelf":"[uniform,] [preserve_scaling]","argsDisplay":"[uniform,] [preserve_scaling]","description":"Removes rotation from `uniform`, which should be a `mat4`. By default `uniform` is `\"MV\"`.  If `preserve_scaling` is `false` or omitted then any scaling will also be removed from the matrix. If it is `true`, then scaling will be preserved, as long as it's the same across all three axes.  Default tag: `\"billboard\"` "},"use_program":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"program"}],"type":"function","argsDisplayOmitSelf":"program","argsDisplay":"program"},"to_json":{"args":[{"name":"value"}],"type":"function","argsDisplayOmitSelf":"value","argsDisplay":"value","description":"Converts the given Lua value to a JSON string and returns it.  Tables with string keys are converted to JSON objects and tables with consecutive integer keys starting at 1 are converted to JSON arrays. Empty tables are converted to empty JSON arrays. Other types of tables are not supported anc cycles are not detected. "},"loop":{"args":[{"name":"func"}],"type":"function","argsDisplayOmitSelf":"func","argsDisplay":"func","description":"`func` should be a function that returns an action. `am.loop` returns an action that repeatedly runs the action returned by `func`. "},"frame_time":{"type":"other","description":"This contains the time the current frame started, in seconds. "},"group":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"children"}],"type":"function","argsDisplayOmitSelf":"children","argsDisplay":"children","description":"Group nodes are only for grouping child nodes under a common parent. They have no other effect. The children can be passed in as a table.  Default tag: `\"group\"`.  Example: \n```\n  local group_node = am.group{node1, node2, node3}\n```\n "},"current_time":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"This returns the time since the program started, in seconds. This value can change over the course of a frame. "},"texture2d":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"This is shorthand for `am.texture2d(am.load_image(filename))`. "},"controller_present":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns `true` if controller `index` is currently connected. "},"quads":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"n"},{"name":"spec"},{"name":"usage"}],"type":"function","argsDisplayOmitSelf":"n, spec [, usage]","argsDisplay":"n, spec [, usage]","description":"Returns a node that renders a set of quads. The returned node"},"encode_png":{"args":[{"name":"image_buffer"}],"type":"function","argsDisplayOmitSelf":"image_buffer","argsDisplay":"image_buffer","description":"Returns a raw buffer containing the png encoding of the given image. "},"load_image":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"Loads the given image file and returns a new image buffer. Only `.png` and `.jpg` files are supported. Returns `nil` if the file was not found. "},"load_buffer":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"Loads the given file and returns a buffer containing the file's data, or `nil` if the file wasn't found. "},"particles2d":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"settings"}],"type":"function","argsDisplayOmitSelf":"settings","argsDisplay":"settings","description":"Renders a simple 2D particle system.  `settings` should be a table with any of the following fields: \n- `source_pos`: The position where the particles emit from (`vec2`)\n- `source_pos_var`: The source position variation (`vec2`)\n- `start_size`: The start size of the particles (number)\n- `start_size_var`: The start size variation (number)\n- `end_size`: The end size of the particles (number)\n- `end_size_var`: The end size variation (number)\n- `angle`: The angle the particles emit at (radians)\n- `angle_var`: The variation in the angle the particles emit at (radians)\n- `speed`: The speed of the particles (number)\n- `speed_var`: The variation in the speed of the particles (number)\n- `life`: The lifetime of the particles (seconds)\n- `life_var`: The variation in lifetime of the particles (seconds)\n- `start_color`: The start color of the particles (`vec4`)\n- `start_color_var`: The variation in the start color of the particles (`vec4`)\n- `end_color`: The end color of the particles (`vec4`)\n- `end_color_var`: The variation in the end color of the particles (`vec4`)\n- `emission_rate`: The number of particles to emit per second\n- `start_particles`: The initial number of particles\n- `max_particles`: The maximum number of particles\n- `gravity`: Gravity to apply to the particles (`vec2`)"},"buffer":{"args":[{"name":"size"}],"type":"function","argsDisplayOmitSelf":"size","argsDisplay":"size","description":"Returns a new buffer of the given size in bytes.  The buffer's memory will be zeroed. "},"program":{"args":[{"name":"vertex_shader"},{"name":"fragment_shader"}],"type":"function","argsDisplayOmitSelf":"vertex_shader, fragment_shader","argsDisplay":"vertex_shader, fragment_shader","description":"Compiles and returns a shader program for use with"},"image_buffer":{"args":[{"name":"buffer"},{"name":"width"},{"name":"height"}],"type":"function","argsDisplayOmitSelf":"[buffer, ] width [, height]","argsDisplay":"[buffer, ] width [, height]","description":"Creates an image buffer of the given width and height. If `height` is omitted it is the same as `width` (the image is square). "},"load_bitmap_font":{"args":[{"name":"filename"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"filename, key","argsDisplay":"filename, key","description":"Loads the image `filename` and returns a font using the glyph layout described by `key` where `key` is a string containing all the glyphs in the file as they are layed out. All glyphs must have the same width and height which is determined from the width and height of the image and the number of rows and columns in `key`. For example if the key is: \n```\n  [[ ABC DEF GHI ]]\n```\n  then the image contains 9 glyphs in 3 rows and 3 columns. If the image has height 30 and width 36 then each glyph has width 10 and height 12."},"wrap":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"node"}],"type":"function","argsDisplayOmitSelf":"node","argsDisplay":"node","description":"This \"wraps\" `node` inside a special type of node called a *wrap node*.  When a wrap node is rendered it renders the inner node. However any nodes added as children of a wrap node are also added to the leaf node(s) of the inner node.  For example suppose we want to create a transformation node called `move_and_rotate` that does both a translation and a rotation: \n```\n  function move_and_rotate(x, y, degrees)     return am.translate(x, y) ^ am.rotate(math.rad(degrees)) end\n```\n  We would like to be able to create such a node and add children to it. Like so: \n```\n  local mvrot = move_and_rotate(10, 20, 60)\nmvrot:append(am.rect(-10, -10, 10, 10))\n```\n  However what this will do is add the `rect` node as a child of the `translate` node returned by `move_and_rotate`.  Instead we need to do: \n```\n \nmvrot\"rotate\":append(am.rect(-10, -10, 10, 10))\n```\n  which is a bit clunky.  A wrap node solves this problem: \n```\n  function move_and_rotate(x, y, degrees)     return am.wrap(am.translate(x, y) ^ am.rotate(math.rad(degrees))) end local mvrot = move_and_rotate(10, 20, 60)\nmvrot:append(am.rect(-10, -10, 10, 10))\n```\n  For completeness here we add some fields to set the x, y and degrees properties of our new node: \n```\n  function move_and_rotate(x, y, degrees)     local inner = am.translate(x, y) ^ am.rotate(math.rad(degrees))     local wrapped = am.wrap(inner)     function wrapped:get_x()         return x     end     function wrapped:set_x(v)         x = v         inner.position2d = vec2(x, y)     end     function wrapped:get_y()         return y     end     function wrapped:set_y(v)         y = v         inner.position2d = vec2(x, y)     end     function wrapped:get_degrees()         return degrees     end     function wrapped:set_degrees(v)         degrees = v         inner\"rotate\".angle = math.rad(degrees)     end     return wrapped end\nlocal mvrot = move_and_rotate(-100, -100, 0)\nmvrot:append(am.rect(-50, -50, 50, 50)) mvrot.x = 100 mvrot.y = 100 mvrot.degrees = 45\n```\n  There are some caveats when using wrap nodes: \n- The inner node is not considered part of the scene   graph for the purpose of running actions. So any actions   need to be attached to the wrap node, not the inner node.\n- Tag search functions do not search the inner node. "},"load_string":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"Loads `filename` and returns its contents as a string or `nil` if the file wasn't found. "},"postprocess":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"settings"}],"type":"function","argsDisplayOmitSelf":"settings","argsDisplay":"settings","description":"Allows for post-processing of a scene. First the children of the `postprocess` node are rendered into a texture, then\nthe texture is rendered to the entire window using a user-supplied shader program.  `settings` is a table containing any number of the following fields: \n- `width`: the width of the texture to render the children into. If omitted the window width is used.\n- `height`: the height of the texture to render the children into. If omitted the window height is used."},"read_uniform":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"}],"type":"function","argsDisplayOmitSelf":"uniform","argsDisplay":"uniform","description":"This node has no effect on rendering. Instead it records the value of the named uniform when rendering occurs. \nThis is useful for finding the value of the model-view matrix (`MV`) at a specific node without having to keep track of all the ancestor transforms. This could then be used to, for example, determine the position of a mouse click\nin a node's coordinate space, by taking the inverse of the model-view matrix.  Fields: \n- `value`: The value of the uniform, or nil if   the node hasn't been rendered yet,   or the named uniform wasn't set in an ancestor node.  Default tag: `\"read_uniform\"`. "},"window":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"settings"}],"type":"function","argsDisplayOmitSelf":"settings","argsDisplay":"settings","description":"Creates a new window and returns a handle to it. `settings` is a table with any of the following fields: \n- **`mode`**:     Either `\"windowed\"` or `\"fullscreen\"`. A fullscreen window will     have the same resolution as the user's desktop. The default is     `\"windowed\"`. Not all platforms support windowed mode (e.g. iOS).     On these platforms this setting is ignored. \n- **`width`** and **`height`**:     The desired size of the window. This is not necessarily the size     of the window in pixels (although it usually is if the window     is created in `\"windowed\"` mode). Instead it defines the size of the window's     *default coordinate system*. If letterboxing is enabled then this\n    is (`-width/2`, `-height/2`) in the bottom-left corner and\n    (`width/2`, `height/2`) in the top-right corner.     If letterboxing is disabled, then the     coordinate system will extend in the horizontal or vertical     directions to ensure an area of at least `width`×`height` is     visible in the center of the window. In either case the centre     coordinate will always be (0, 0).     The default size is 640×480. \n- **`title`**:     The window title. \n- **`resizable`**:     Whether the window can be resized by the user (`true` or `false`,     default `true`). \n- **`borderless`**:     Whether the window has a title bar and border (`true` or `false`,     default `false`). \n- **`highdpi`**:     Whether to use high DPI resolution if available (`true` or `false`,     default `false`). \n- **`depth_buffer`**:     Whether the window has a depth buffer (`true` or `false`,     default `false`). \n- **`stencil_buffer`**:     Whether the window has a stencil buffer (`true` or `false`,     default `false`). \n- **`stencil_clear_value`**:     The value to clear the stencil buffer with before drawing each     frame (an integer between 0 and 255). The default is 0. \n- **`lock_pointer`**:     `true` or `false`. When pointer lock is enabled the cursor will be     hidden and mouse movement will be set to \"relative\" mode. In this     mode the mouse is tracked infinitely in all directions, i.e. as if     there is no edge of the screen to stop the mouse cursor. This is\n    useful for implementing first-person style mouse-look. The default     is `false`. \n- **`show_cursor`**:     Whether to show the mouse cursor (`true` or `false`, default `true`). \n- **`clear_color`**:     The color (a `vec4`) used to clear the window each frame before drawing.     The default clear color is black (`vec4(0, 0, 0, 1)`). \n- **`letterbox`**:     `true` or `false`. Indicates whether the original aspect ratio (as     determined by the `width` and `height` settings of the window)     should be maintained after a resize by adding black horizontal or     vertical bars to the sides of the window. The default is `true`. \n- **`msaa_samples`**:\n    The number of samples to use for multisample anti-aliasing. This\n    must be a power of 2. Use zero (the default) for no anti-aliasing. \n- **`orientation`**:     `\"portrait\"` or `\"landscape\"`. This specifies the supported     orientation of the window on platforms that support orientation     changes (e.g. iOS). If omitted, both orientations are supported. \n- **`projection`**:     A custom projection matrix (a `mat4`) to be used for the window's     coordinate system. This matrix is used when transforming     mouse or touch event coordinates and is set as the projection     matrix for rendering, but does not affect the `left`, `right`,     `top`, `bottom`, `width` and `height` fields of the window. "},"lookat":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"eye"},{"name":"center"},{"name":"up"}],"type":"function","argsDisplayOmitSelf":"[uniform,] eye, center, up","argsDisplay":"[uniform,] eye, center, up","description":"Sets `uniform` to the \"lookat matrix\" which looks from `eye` (a `vec3`) to `center` (a `vec3`), with `up` (a unit `vec3`) as the up direction.  This node can be thought of a camera positioned at `eye` and facing the point `center`.  The default value for `uniform` is `\"MV\"`.  Fields: \n- `eye`: The camera position (`vec3`). Updatable.\n- `center`: A point the camera is facing (`vec3`). Updatable.\n- `up`: The up direction of the camera (`vec3`). Updatable.  Default tag: `\"lookat\"`. "},"show_gamecenter_leaderboard":{"args":[{"name":"leaderboard_id"}],"type":"function","argsDisplayOmitSelf":"leaderboard_id","argsDisplay":"leaderboard_id","description":"Display a leaderboard. "},"viewport":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"x"},{"name":"y"},{"name":"width"},{"name":"height"}],"type":"function","argsDisplayOmitSelf":"x, y, width, height","argsDisplay":"x, y, width, height","description":"Set the viewport, which is the rectangular area of the window into which rendering will occur. \n`x` and `y` is the bottom-left corner\nof the viewport in pixels, where the bottom-left corner of the window is (0, 0). `width` and `height` are also in pixels.  Fields: \n- `x`, `y`, `width`, `height`: Updatable.  Default tag: `\"viewport\"`. "},"platform":{"type":"other","description":"The platform Amulet is running on. It will be one of the strings `\"linux\"` `\"windows\"` `\"osx\"` `\"ios\"` `\"android\"` or `\"html\"`. "},"cull_face":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"face"}],"type":"function","argsDisplayOmitSelf":"face","argsDisplay":"face","description":"Culls triangles with a specific winding.  The possible values for `face` are: \n- `\"back\"`: Cull back-facing triangles (same as `\"cw\"` below)\n- `\"front\"`: Cull front-facing triangles (same as `\"ccw\"` below)\n- `\"cw\"`: Cull clockwise wound triangles.\n- `\"ccw\"`: Cull counter-clockwise wound triangles.\n- `\"none\"`: Do not cull any triangles.  Fields: \n- `face`: Updatable.  Default tag: `\"cull_face\"`. "},"color_mask":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"red"},{"name":"green"},{"name":"blue"},{"name":"alpha"}],"type":"function","argsDisplayOmitSelf":"red, green, blue, alpha","argsDisplay":"red, green, blue, alpha","description":"Apply a color mask. The four arguments can be `true` or `false` and determine whether the corresponding color channel is updated in the rendering target (either the current window or framebuffer being rendered to).  For example using a mask of `am.color_mask(false, true, false, true)` will cause only the green and alpha channels to be updated.  Fields: \n- `red`: Updatable.\n- `green`: Updatable.\n- `blue`: Updatable.\n- `alpha`: Updatable.  Default tag: `\"color_mask\"`. "},"text":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"font"},{"name":"string"},{"name":"color"},{"name":"halign"},{"name":"valign"}],"type":"function","argsDisplayOmitSelf":"[font, ] string [, color] [, halign [, valign]]","argsDisplay":"[font, ] string [, color] [, halign [, valign]]","description":"Renders some text. "},"draw":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"primitive"},{"name":"elements"},{"name":"first"},{"name":"count"}],"type":"function","argsDisplayOmitSelf":"primitive [, elements] [, first [, count]]","argsDisplay":"primitive [, elements] [, first [, count]]","description":"Draws the currently bound vertices using the current shader program with the currently bound parameter values.  `primitive` can be one of the following: \n- `\"points\"`\n- `\"lines\"`\n- `\"line_strip\"`\n- `\"line_loop\"`\n- `\"triangles\"`\n- `\"triangle_strip\"`\n- `\"triangle_fan\"`  Note that `\"line_loop\"` and `\"triangle_fan\"` may be slow on some systems.  `elements`, if supplied, should be a `ushort_elem` or `uint_elem`\nview containing 1-based attribute indices. If omitted the attributes are rendered in order as if `elements` were"},"rect":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"x1"},{"name":"y1"},{"name":"x2"},{"name":"y2"},{"name":"color"}],"type":"function","argsDisplayOmitSelf":"x1, y1, x2, y2 [, color]","argsDisplay":"x1, y1, x2, y2 [, color]","description":"Draws a rectangle from (`x1`, `y1`) to (`x2`, `y2`).  `color` should be a `vec4` and defaults to white.  Fields: \n- `x1`: The left coordinate of the rectangle. Updatable.\n- `y1`: The bottom coordinate of the rectangle. Updatable.\n- `x2`: The right coordinate of the rectangle. Updatable.\n- `y2`: The top coordinate of the rectangle. Updatable.\n- `color`: The color of the rectangle as a `vec4`. Updatable.  Default tag: `\"rect\"`. "},"gamecenter_available":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns true if Game Center was successfully initialized. "},"load_obj":{"args":[{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"filename","description":"This loads the given `.obj` file and returns 4 things:  1. A buffer containing the vertex, normal and texture coordinate    data. 2. The stride in bytes. 3. The offset of the normals in bytes. 4. The offset of the texture coordinates in bytes.  The vertex data is always at offset 0. If the normal or texture coordinate data is not present, the corresponding return value will be nil.  The faces in the `.obj` file must all be triangles (quads aren't supported).  Here's an example of how to load a model and display it. The example loads an model from `model.obj` and assumes it contains normal\nand texture coordinate data and the triangles have a counter-clockwise winding. It loads a texture from the file `texture.png`. \n```\n  local win = am.window{depth_buffer = true}  local buf, stride, norm_offset, tex_offset = am.load_obj(\"model.obj\") local verts = buf:view(\"vec3\", 0, stride) local normals = buf:view(\"vec3\", norm_offset, stride) local uvs = buf:view(\"vec2\", tex_offset, stride)      local shader = am.program([[ precision mediump float; attribute vec3 vert; attribute vec2 uv; attribute vec3 normal; uniform mat4 MV; uniform mat4 P; varying vec3 v_shadow; varying vec2 v_uv; void main() {     vec3 light = normalize(vec3(1, 0, 2));     vec3 nm = normalize((MV * vec4(normal, 0.0)).xyz);     v_shadow = vec3(max(0.1, dot(light, nm)));     v_uv = uv;     gl_Position = P * MV * vec4(vert, 1.0); } ]], [[ precision mediump float; uniform sampler2D tex; varying vec3 v_shadow; varying vec2 v_uv; void main() {     gl_FragColor = texture2D(tex, v_uv) * vec4(v_shadow, 1.0); } ]])  win.scene =     am.cull_face\"ccw\"\n    ^ am.translate(0, 0, -5)     ^ am.use_program(shader)     ^ am.bind{         P = math.perspective(math.rad(60), win.width/win.height, 1, 1000),         vert = verts,         normal = normals,         uv = uvs,         tex = am.texture2d(\"texture.png\"),     }     ^am.draw\"triangles\"\n```\n"},"rotate":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"rotation"}],"type":"function","argsDisplayOmitSelf":"[uniform,] rotation","argsDisplay":"[uniform,] rotation","description":"Apply a rotation to a 4x4 matrix uniform. `uniform` is the uniform name as a string. It is `\"MV\"` by default.  `rotation` can be either a quaternion, or an angle (in radians) followed by an optional `vec3` axis. If the axis is omitted it is assumed to be `vec3(0, 0, 1)` so the rotation becomes a 2D rotation in the xy plane about the z axis.  Fields: \n- `rotation`: The rotation as a `quat`. Updatable.\n- `angle`: The rotation angle in radians. Updatable.\n- `axis`: The rotation axis as a `vec3`. Updatable.  Default tag: `\"rotate\"`.  Examples: \n```\n  local node1 = am.rotate(math.rad(45)) local node2 = am.rotate(math.pi/4, vec3(0, 1, 0)) local node3 = am.rotate(\"MyModelViewMatrix\",     quat(math.pi/6, vec3(1, 0, 0))) node1.angle = math.rad(60) node2.axis = vec3(0, 0, 1) node3.rotation = quat(math.rad(60), vec3(0, 0, 1))\n```\n "},"glob":{"args":[{"name":"patterns"}],"type":"function","argsDisplayOmitSelf":"patterns","argsDisplay":"patterns","description":"Returns an array (table) of file names matching the given glob pattern(s). `patterns` should be a table of glob pattern strings. A glob pattern is a file path with zero or more wildcard (`*`) characters.  Any matching files that are directories will have a slash (`/`) appended to their names, even on Windows.  The slash character (`/`) can be used as a directory separator on Windows (you don't need to use `\\`). Furthermore returned paths will always have '/' as the directory separator, even on Windows.  **Note:** This function only searches for files on the file system. It won't search the resource archive in a exported game. Its intended use is for writing file processing utilities and not for use directly in games you wish to distribute.  Example: \n```\n  local image_files = am.glob{\"images/*.png\", \"images/*.jpg\"}\n```\n "},"controller_button_pressed":{"args":[{"name":"index"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"index, button","argsDisplay":"index, button","description":"Returns `true` if the given button of controller `index` was pressed since the last frame.  `button` can be one of the following strings: \n- `\"a\"`\n- `\"b\"`\n- `\"x\"`\n- `\"y\"`\n- `\"back\"`\n- `\"guide\"`\n- `\"start\"`\n- `\"ls\"`\n- `\"rs\"`\n- `\"lb\"`\n- `\"rb\"`\n- `\"up\"`\n- `\"down\"`\n- `\"left\"`\n- `\"right\"` "},"scale":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"scaling"}],"type":"function","argsDisplayOmitSelf":"[uniform,] scaling","argsDisplay":"[uniform,] scaling","description":"Apply a scale transform to a 4x4 matrix uniform. `uniform` is the uniform name as a string. It is `\"MV\"` by default.  `scaling` may be 1, 2 or 3 numbers or a `vec2` or `vec3`. If 1 number is provided it is assume to be the x and y components of the scaling and the z scaling is assumed to be 1. If 2 numbers or a `vec2` is provided, they are the scaling for the x and y components and z is assumed to be 1.  Fields: \n- `scale`: The scale as a `vec3`. Updatable.\n- `scale2d`: The scale as a `vec2`. Updatable.\n- `x`, `y`, `z`: The `x`, `y` and `z` components of the scale. Updatable.  Default tag: `\"scale\"`.  Examples: \n```\n  local node1 = am.scale(2) local node2 = am.scale(2, 1) local node3 = am.scale(vec2(1, 2)) local node4 = am.scale(\"MyModelViewMatrix\", vec3(0.5, 2, 3)) node1.scale2d = vec2(1) node2.x = 3 node4.scale = vec3(1, 3, 2)\n```\n "},"transform":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"uniform"},{"name":"matrix"}],"type":"function","argsDisplayOmitSelf":"[uniform,] matrix","argsDisplay":"[uniform,] matrix","description":"Pre-multiply a 4x4 matrix uniform by the given 4x4 matrix. `uniform` is the uniform name as a string (default is `\"MV\"`).  Fields: \n- `mat`: The matrix to multiply the uniform by. Updatable.  Default tag: `\"transform\"`. "},"blend":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"mode"}],"type":"function","argsDisplayOmitSelf":"mode","argsDisplay":"mode","description":"Set the blending mode.  The possible values for `mode` are: \n- `\"off\"`\n- `\"alpha\"`\n- `\"premult\"`\n- `\"add\"`\n- `\"subtract\"`\n- `\"add_alpha\"`\n- `\"subtract_alpha\"`\n- `\"multiply\"`\n- `\"invert\"`  Fields: \n- `mode`: Updatable. "},"int_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns an `int_norm` view to a newly created buffer and fills it with the values in the given table. "},"int_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns an `int` view to a newly created buffer and fills it with the values in the given table. "},"byte_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `byte` view to a newly created buffer and fills it with the values in the given table. "},"ushort_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `ushort` view to a newly created buffer and fills it with the values in the given table. "},"stencil_test":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"settings"}],"type":"function","argsDisplayOmitSelf":"settings","argsDisplay":"settings","description":"Sets the stencil test and mask. The window or framebuffer being rendered to needs to have a stencil buffer for this to have any effect.  `settings` should be a table with any combination of the following fields: \n- `enabled`: whether the stencil test is enabled (`true`/`false`, default `false`)\n- `ref`: the reference value to use in the test function   (must be an integer between 0 and 255, default 0).\n- `read_mask`: a bitmask to apply to the reference value and the stencil buffer   value before doing the test (must be an integer between 0 and 255, default 255).\n- `write_mask`: a bitmask that controls which stencil buffer bits can be written to   (must be an integer between 0 and 255, default 255).\n- `func_front`: the test function to use for front-facing (CCW) triangles   (`\"never\"`, `\"always\"`, `\"equal\"`, `\"notequal\"`, `\"less\"`, `\"lequal\"`,   `\"greater\"` or `\"gequal\"`, default `\"always\"`). The function compares   a supplied reference value with the value in the stencil buffer.\n- `op_fail_front`: The operation to perform if the stencil test fails   (see below for possible values).\n- `op_zfail_front`: The operation to perform if the stencil test passes, but the depth test fails   (see below for possible values).\n- `op_zpass_front`: The operation to perform if the stencil test passes and the depth test passes   (see below for possible values).\n- `func_back`: same as `func_front`, but for back-facing (CW) triangles.\n- `op_fail_back`: same as `op_fail_front`, but for back-facing (CW) triangles.\n- `op_zfail_back`: same as `op_zfail_front`, but for back-facing (CW) triangles.\n- `op_zpass_back`: same as `op_zpass_front`, but for back-facing (CW) triangles.  The `op_fail_front`, `op_zfail_front` and `op_zpass_front` fields (and the analogous fields\nfor back-facing triangles) determine how the stencil buffer is modified. They can be one of the following values: \n- `\"keep\"`: keeps the existing stencil buffer value\n- `\"zero\"`: sets the stencil buffer  to zero\n- `\"replace\"`: replaces the stencil buffer value with the supplied reference value\n- `\"invert\"`: invert the bits of the stencil buffer\n- `\"incr\"`: increment the stencil buffer value\n- `\"decr\"`: decrement the stencil buffer value\n- `\"incr_wrap\"`: increment the stencil buffer value, wrapping back to zero on overflow (> 255)\n- `\"decr_wrap\"`: decrement the stencil buffer value, wrapping to 255 on underflow  All the settings can be updated after the depth test node has been created using fields on the node with the corresponding names.  Default tag: `\"stencil_test\"`. "},"controllers_present":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a list of currently connected controller indexes. "},"ubyte_norm_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `ubyte_norm` view to a newly created buffer and fills it with the values in the given table. "},"parse_json":{"args":[{"name":"json"}],"type":"function","argsDisplayOmitSelf":"json","argsDisplay":"json","description":"Converts the given JSON string to a Lua value and returns it. If there was an error parsing the JSON then `nil` is returned and the error message is returned as a second return value. "},"controller_lt_val":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns the value of the left trigger axis of controller `index`. The returned value is between 0 and 1. "},"controller_detached":{"args":[{"name":"index"}],"type":"function","argsDisplayOmitSelf":"index","argsDisplay":"index","description":"Returns `true` if controller `index` was removed since the last frame. "},"base64_encode":{"args":[{"name":"buffer"}],"type":"function","argsDisplayOmitSelf":"buffer","argsDisplay":"buffer","description":"Returns a base64 encoding of a buffer as a string. "},"controllers_detached":{"args":[{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"","description":"Returns a list of controller indexes removed since the last frame. "},"delay":{"args":[{"name":"seconds"}],"type":"function","argsDisplayOmitSelf":"seconds","argsDisplay":"seconds","description":"Returns an action that does nothing for the given number of seconds. "},"vec3_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `vec3` view to a newly created buffer and fills it with the values in the given table.  The table may contain either `vec3`s or numbers (though not a mix). If the table contains numbers they are used for the vector components and the resulting view will have a third the number of elements as there are numbers in the table. "},"tween":{"args":[{"name":"target"},{"name":"time"},{"name":"values"},{"name":"ease"}],"type":"function","argsDisplayOmitSelf":"[target,] time, values [, ease]","argsDisplay":"[target,] time, values [, ease]","description":"Returns an action that changes the values of  one or more fields of `target` to new values over a given time period.  `time` is in seconds.  `values` is a table mapping field names to their new values.  `ease` is an easing function. This function takes a value between 0 and 1 and returns a value between 0 and 1. This determines the \"shape\" of the interpolation between the two values. If omitted a linear interpolation is used. \nThe following easing functions are pre-defined (though of course you can define your own): \n- `am.ease.linear`\n- `am.ease.quadratic`\n- `am.ease.cubic`\n- `am.ease.hyperbola`\n- `am.ease.sine`\n- `am.ease.windup`\n- `am.ease.elastic`\n- `am.ease.bounce`\n- `am.ease.cubic_bezier(x1, y1, x2, y2)`: This returns a cubic   bezier ease function with the given control points.\n- `am.ease.out(f)`: This takes an existing ease function and   returns its reverse. E.g. if the existing ease function is   slow and then fast, the new one will be fast and then slow.\n- `am.ease.inout(f, g)`. This returns an ease function that   uses the ease function `f` for the first half of the transition   and `out(g)` for the second half.  Tweening works with fields that are numbers or vectors (`vec2`, `vec3` or `vec4`)."},"wait":{"args":[{"name":"action"}],"type":"function","argsDisplayOmitSelf":"action","argsDisplay":"action","description":"Waits for the given action to finish before continuing. This can only be called from within a coroutine.  Example: \n```\n  am.window{}.scene =\n    am.rect(-100, -100, 100, 0, vec4(1, 0, 0, 1))     :action(coroutine.create(function(node)         while true do             am.wait(am.tween(node, 1, {                 color = vec4(0, 1, 0, 1),                 y2 = 100             }))             am.wait(am.tween(node, 1, {                 color = vec4(1, 0, 0, 1),                 y2 = 0             }))         end     end))\n```\n"},"uint_elem_array":{"args":[{"name":"table"}],"type":"function","argsDisplayOmitSelf":"table","argsDisplay":"table","description":"Returns a `uint_elem` view to a newly created buffer and fills it with the values in the given table. "},"submit_gamecenter_achievement":{"args":[{"name":"achievment_id"}],"type":"function","argsDisplayOmitSelf":"achievment_id","argsDisplay":"achievment_id","description":"Submit an achievement. "}}},"vec3":{"type":"function","returnTypes":[{"type":"ref","name":"vec3"}],"args":[{"name":"x"},{"name":"y"},{"name":"z"}]}}},"packagePath":"./?.lua,./?/init.lua","cwd":"./src","luaVersion":"5.1","namedTypes":{"vec4":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"q":{"type":"number"},"y":{"type":"number"},"g":{"type":"number"},"b":{"type":"number"},"s":{"type":"number"},"w":{"type":"number"},"r":{"type":"number"},"z":{"type":"number"},"a":{"type":"number"},"p":{"type":"number"}}},"node":{"type":"table","fields":{"child":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"n"}],"type":"function","argsDisplayOmitSelf":"n","argsDisplay":"self, n","description":"Returns the nth child of `node` (or `nil` if there is no such child). "},"prepend":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"child"}],"type":"function","argsDisplayOmitSelf":"child","argsDisplay":"self, child","description":"Adds `child` to the start of `node`'s child list and returns `node`. "},"untag":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"tagname"}],"type":"function","argsDisplayOmitSelf":"tagname","argsDisplay":"self, tagname","description":"Removes a tag from a node and returns the node. "},"replace":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"tagname"},{"name":"replacement"}],"type":"function","argsDisplayOmitSelf":"tagname, replacement","argsDisplay":"self, tagname, replacement","description":"Searches for a node with tag `tagname` in the descendents of `node` and replaces the first one it finds with `replacement`. Then returns `node`. "},"action":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"id"},{"name":"action"}],"type":"function","argsDisplayOmitSelf":"[id,] action","argsDisplay":"self, [id,] action","description":"Attaches an action to a node and returns the node.  `action` may be a function or a coroutine.  The action function will be called exactly once per frame as long as the node is part of a scene graph that is attached to a window. If a coroutine is used, it will be run until it yields or finishes. The action will be run for the first time on the frame after it was attached to the node.  The action function may accept a single argument which is the node to which it is attached. If a coroutine is used, then the node is returned by `coroutine.yield()`.  If the action function returns `true` then the action will be removed from the node and not run again. Similarly if a coroutine yields `true` or finishes.  Each action has an ID. If the `id` argument is omitted, then its ID is the `action` argument itself. If present, `id` may be a value of any type besides nil, a function or coroutine (typically it's a string).  Multiple actions may be attached to a scene node, but they must all have unique ids. If you attempt to attach an action with an ID that is already used by another action on the same node, then the other action will be removed before the new one is attached.  The order that actions are run is determined by the node's position in the scene graph. Each node is visited in\ndepth-first, left-to-right order and the actions on each node are run in the order they were added to the node. Each action is never run more than once per frame, even if the node occurs multiple times in the graph or is part of a cycle. For example, given the following scene graph:  ![](graphs/scene8.png)  The nodes will be visited in this order: \n- `node1`\n- `node2`\n- `node4`\n- `node5`\n- `node7`\n- `node6`\n- `node3`  Note that the action execution order is determined before the first action runs each frame and is not affected by any modifications to the scene graph made by actions running during the frame. Any modifications to the scene graph will only affect the order of actions in subsequent frames. "},"hidden":{"returnTypes":[{"type":"ref","name":"node"}],"type":"other","description":"Determines whether the node and its children are rendered. The default is `false`, meaning that the node is rendered.  Updatable. "},"child_pairs":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns an iterator over all `node`'s children. For example: \n```\n  for i, child in node:child_pairs() do\n    -- do something with child end\n```\n "},"remove_all":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Removes all of `node`'s children and returns `node`. "},"all":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"tagname"}],"type":"function","argsDisplayOmitSelf":"tagname","argsDisplay":"self, tagname","description":"Searches `node` and all its descendents for any nodes with the tag `tagname` and returns them as a table. "},"num_children":{"returnTypes":[{"type":"ref","name":"node"}],"type":"other","description":"Returns the node's child count.  Readonly. "},"recursion_limit":{"returnTypes":[{"type":"ref","name":"node"}],"type":"other","description":"This determines the number of times the node will be rendered recursively when part of a cycle in the scene graph. The default is 8.  Updatable. "},"remove":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"tagname"}],"type":"function","argsDisplayOmitSelf":"tagname","argsDisplay":"self, tagname","description":"Searches for a node with tag `tagname` in the descendents of `node` and removes the first one it finds. Then returns `node`. "},"tag":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"tagname"}],"type":"function","argsDisplayOmitSelf":"tagname","argsDisplay":"self, tagname","description":"Adds a tag to a node and returns the node. `tagname` should be a string.  Note that most scene nodes receive a default tag name when they are created. See the documentation of the different nodes below for what these default tags are.  No more than 65535 unique tag names may be created in a single application. "},"late_action":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"id"},{"name":"action"}],"type":"function","argsDisplayOmitSelf":"[id,] action","argsDisplay":"self, [id,] action","description":"Attach a *late action* to a scene node. Late actions are the same as normal actions, except they are run after all normal actions are finished. "},"append":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"child"}],"type":"function","argsDisplayOmitSelf":"child","argsDisplay":"self, child","description":"Appends `child` to the end of `node`'s child list and returns `node`. "},"cancel":{"returnTypes":[{"type":"ref","name":"node"}],"args":[{"name":"self"},{"name":"id"}],"type":"function","argsDisplayOmitSelf":"id","argsDisplay":"self, id","description":"Cancels an action. "},"paused":{"returnTypes":[{"type":"ref","name":"node"}],"type":"other"}}},"framebuffer":{"type":"table","fields":{"clear_color":{"type":"other","description":"The color to use when clearing the framebuffer (a `vec4`).  Updatable. "},"render":{"args":[{"name":"self"},{"name":"node"}],"type":"function","argsDisplayOmitSelf":"node","argsDisplay":"self, node","description":"Renders `node` into the framebuffer. "},"stencil_clear_value":{"type":"other","description":"The value to use when clearing the framebuffer's stencil buffer (an integer between 0 and 255).  Updatable. "},"read_back":{"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Reads the pixels from the framebuffer into the texture's backing image buffer. This is a relatively slow operation, so use it sparingly. "},"pixel_width":{"type":"other","description":"The width of the framebuffer, in pixels.  Readonly. "},"resize":{"args":[{"name":"self"},{"name":"width"},{"name":"height"}],"type":"function","argsDisplayOmitSelf":"width, height","argsDisplay":"self, width, height","description":"Resize the framebuffer. Only framebuffers with textures that have no backing image buffers can be resized. Also the texture must not use a filter that requires a mipmap."},"pixel_height":{"type":"other","description":"The height of the framebuffer, in pixels.  Readonly. "},"projection":{"type":"other","description":"A `mat4` projection matrix to use when rendering nodes into this framebuffer. The `\"P\"` uniform will be set to this. If this is not specified then the projection\n`math.ortho(-width/2, width/2, -height/2, height/2)` is used.  Updatable. "},"clear":{"args":[{"name":"self"},{"name":"color"},{"name":"depth"},{"name":"stencil"}],"type":"function","argsDisplayOmitSelf":"[color [, depth [, stencil]]]","argsDisplay":"self, [color [, depth [, stencil]]]"},"render_children":{"args":[{"name":"self"},{"name":"node"}],"type":"function","argsDisplayOmitSelf":"node","argsDisplay":"self, node","description":"Renders `node`'s children into the framebuffer (but not `node` itself). "}}},"buffer":{"type":"table","fields":{"view":{"args":[{"name":"self"},{"name":"type"},{"name":"offset"},{"name":"stride"},{"name":"count"}],"type":"function","argsDisplayOmitSelf":"type [, offset [, stride [, count]]]","argsDisplay":"self, type [, offset [, stride [, count]]]","description":"Returns a view into `buffer`.  `type` can be one of the following:  type                    size (bytes)  Lua value range             internal range            endianess\n--------------------   -------------  --------------------------- ------------------------  -----------\n`\"float\"`                          4  approx -3.4e38 to 3.4e38    same                      native `\"vec2\"`                           8  any `vec2`                  same                      native `\"vec3\"`                          12  any `vec3`                  same                      native `\"vec4\"`                          16  any `vec4`                  same                      native\n`\"byte\"`                           1  -128 to 127                 same                      N/A `\"ubyte\"`                          1  0 to 255                    same                      N/A\n`\"byte_norm\"`                      1  -1.0 to 1.0                 -127 to 127               N/A `\"ubyte_norm\"`                     1  0.0 to 1.0                  0 to 255                  N/A\n`\"short\"`                          2  -32768 to 32767             same                      native `\"ushort\"`                         2  0 to 65535                  same                      native\n`\"short_norm\"`                     2  -1.0 to 1.0                 -32767 to 32767           native `\"ushort_norm\"`                    2  0.0 to 1.0                  0 to 65535                native `\"ushort_elem\"`                    2  1 to 65536                  0 to 65535                native\n`\"int\"`                            4  -2147483648 to 2147483647   same                      native `\"uint\"`                           4  0 to 4294967295             same                      native `\"uint_elem\"`                      4  1 to 4294967296             0 to 4294967295           native \nThe `_norm` types map Lua numbers in the range -1 to 1 (or 0 to 1 for unsigned types) to integer values in the buffer.  The `_elem` types are specifically for element array buffers and offset the Lua numbers by 1 to conform to the Lua convention of  array indices starting at 1.  All view types currently use the native platform endianess, which happens\nto be little-endian on all currently supported platforms.  The `offset` argument is the byte offset of the first element of the view. The default is 0.  The `stride` argument is the distance between consecutive values in the view, in bytes. The default is the size of the view type.  The `count` argument determines the number of elements in the view. The underlying buffer must be large enough to accommodate the elements with the given stride. The default is the maximum supported by the buffer with the given stride.  You can read and write to views as if they were Lua arrays (as with Lua arrays, indices start at 1). For example: \n```\n  local buf = am.buffer(12) local view = buf:view(\"float\") view[1] = 1.5  view[2] = view[1] + 2\n```\n  Attempting to read an index less than 1 or larger than the number of elements will return nil. "}}},"vec3":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"y":{"type":"number"},"g":{"type":"number"},"b":{"type":"number"},"s":{"type":"number"},"r":{"type":"number"},"z":{"type":"number"},"p":{"type":"number"}}},"vec2":{"type":"table","fields":{"t":{"type":"number"},"x":{"type":"number"},"s":{"type":"number"},"y":{"type":"number"},"r":{"type":"number"},"g":{"type":"number"}}},"view":{"type":"table","fields":{"buffer":{"type":"other","description":"The buffer associated with the view.  Readonly. "},"slice":{"args":[{"name":"self"},{"name":"n"},{"name":"count"}],"type":"function","argsDisplayOmitSelf":"n [, count]","argsDisplay":"self, n [, count]","description":"Returns a new view of the same type as `view` that references the same buffer, but which starts at the `n`th element of `view` and continues for"},"set":{"args":[{"name":"self"},{"name":"val"},{"name":"start"},{"name":"count"}],"type":"function","argsDisplayOmitSelf":"val [, start [, count]]","argsDisplay":"self, val [, start [, count]]","description":"Bulk sets values in a view. This is faster than setting them one at a time.  If `val` is a number or vector then this sets all elements of `view` to `val`.  If `val` is a table then the elements are set to their corresponding values from the table.  As a special case, if `val` is a table of numbers and the view's type is a vector, then the elements of the table will be used to set the components of the vectors in the view. For example: \n```\n  local verts = am.buffer(24):view(\"vec3\") verts:set{1, 2, 3, 4, 5, 6}\nprint(verts[1]) -- vec3(1, 2, 3)\nprint(verts[2]) -- vec3(4, 5, 6)\n```\n  Finally if `val` is another view then the elements are set to the corresponding values from that view. The views may be of different types as long as they are \"compatible\". The types are converted as if each element were set using the Lua code `view1[i] = view2[i]`. This means you can't set a number view to a vector view or vice versa.  If `start` is given then only elements at that index and beyond will be set. The default value for `start` is `1`.  If `count` is given then at most that many elements will be set. "}}},"window":{"type":"table","fields":{"clear_color":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"touch_ended":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns true if the specific touch ended since the last frame.  The default value for `touch` is `1`. "},"scene":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"left":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The x coordinate of the left edge of the  window in the window's default coordinate system.  Readonly. "},"lock_pointer":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"keys_pressed":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"key","argsDisplay":"self, key","description":"Returns an array of all the keys whose state changed from up to down since the last frame. "},"touch_norm_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the change in touch position since the last frame in normalized device coordinates (a `vec2`).  The default value for `touch` is `1`. "},"touch_force":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the force of the touch where 0 means no force and 1 is \"average\" force. Harder presses will result in values larger than 1.  The default value for `touch` is `1`. "},"bottom":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The y coordinate of the bottom edge of the window, in the window's default coordinate system.  Readonly. "},"touch_began":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns true if the specific touch began since the last frame.  The default value for `touch` is `1`. "},"mouse_down":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"button","argsDisplay":"self, button","description":"Returns `true` if the given button was down at the start of the frame. `button` may be `\"left\"`, `\"right\"` or `\"middle\"`. "},"mouse_norm_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the change in mouse position since the last frame, in normalized device coordinates (a `vec2`). "},"mouse_pressed":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"button","argsDisplay":"self, button","description":"Returns `true` if the given mouse button's state changed from up to down since the last frame. `button` may be `\"left\"`, `\"right\"` or `\"middle\"`.  Note that if `mouse_pressed` returns `true` for a particular button then `mouse_down` will also return `true`. Also  if `mouse_pressed` returns `true` for a particular button then `mouse_released` will return `false`. (If necessary, Amulet will postpone button release events to the next frame to ensure this.) "},"touch_force_available":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns true if touch force is supported on the device."},"touch_active":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns true if the specific touch is active.  The default value for `touch` is `1`. "},"mouse_norm_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the position of the mouse cursor in normalized device coordinates, as a `vec2`. "},"keys_released":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"key","argsDisplay":"self, key","description":"Returns an array of all the keys whose state changed from down to up since the last frame. "},"right":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The x coordinate of the right edge of the window, in the window's default coordinate system.  Readonly. "},"pixel_height":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The real height of the window in pixels  Readonly. "},"show_cursor":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"top":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The y coordinate of the top edge of the window, in the window's default coordinate system.  Readonly. "},"stencil_clear_value":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"resized":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns true if the window's size changed since the last frame. "},"touch_pixel_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the change in touch position since the last frame in pixels (a `vec2`).  The default value for `touch` is `1`. "},"mouse_wheel_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the change in mouse scroll wheel position since the last frame (a `vec2`). "},"pixel_width":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The real width of the window in pixels.  Readonly. "},"touch_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the change in touch position since the last frame in the window's coordinate system (a `vec2`).  The default value for `touch` is `1`. "},"touch_pixel_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the last touch position in pixels, where the bottom left corner of the window is (0, 0) (a `vec2`).  The default value for `touch` is `1`. "},"key_released":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"key","argsDisplay":"self, key","description":"Returns true if the given key's state changed from down to up since the last frame.  Note that if `key_released` returns true for a particular key, then `key_down` will return `false`. Also if `key_released` returns `true` for a particular key then `key_pressed` will return `false`. (If necessary, Amulet will postpone key press events to the next frame to ensure this.) "},"mouse_released":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"button"}],"type":"function","argsDisplayOmitSelf":"button","argsDisplay":"self, button","description":"Returns true if the given mouse button's state changed from down to up since the last frame. `button` may be `\"left\"`, `\"right\"` or `\"middle\"`.  Note that if `mouse_released` returns `true` for a particular button then `mouse_down` will return `false`. Also  if `mouse_released` returns `true` for a particular button then `mouse_pressed` will return `false`. (If necessary, Amulet will postpone button press events to the next frame to ensure this.) "},"projection":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"touches_began":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns an array of the touches that began since the last frame.  Each touch is an integer and each time a new touch occurs the lowest available integer greater than or equal to 1 is assigned to the touch.  If there are no other active touches then the next touch will always be 1, so if your interface only expects a single touch at a time, you can just use 1 for all touch functions that take a touch argument and any additional touches will be ignored. "},"key_pressed":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"key","argsDisplay":"self, key","description":"Returns true if the given key's state changed from up to down since the last frame.  Note that if `key_pressed` returns true for a particular key, then `key_down` will also return `true`. Also if `key_pressed` returns `true` for a particular key then `key_released` will return `false` for the same key. (If necessary, Amulet will postpone key release events to the next frame to ensure this.) "},"touch_norm_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the last touch position in normalized device coordinates (a `vec2`).  The default value for `touch` is `1`. "},"touch_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"[touch]"}],"type":"function","argsDisplayOmitSelf":"[touch]","argsDisplay":"self, [touch]","description":"Returns the last touch position in the window's coordinate system (a `vec2`).  The default value for `touch` is `1`. "},"mouse_pixel_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the change in mouse position since the last frame, in pixels (a `vec2`). "},"active_touches":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns an array of the currently active touches. "},"close":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Closes the window and quits the application if this was the only window. "},"height":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The height of the window in the window's default coordinate space. This will always be equal to the `height` setting supplied when the window was created if the `letterbox` setting is enabled. Otherwise it may be larger, but it will never be smaller than the `height` setting.  Readonly. "},"mouse_wheel":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the mouse scroll wheel position (a `vec2`). "},"letterbox":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"key_down":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":"key"}],"type":"function","argsDisplayOmitSelf":"key","argsDisplay":"self, key","description":"Returns true if the given key was down at the start of the current frame. "},"mouse_pixel_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the position of the mouse cursor in pixels where the bottom left corner of the window has coordinate (0, 0), as a `vec2`. "},"mouse_delta":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the change in mouse position since the last frame, in the window's coordinate system (a `vec2`). "},"touches_ended":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns an array of the touches that ended since the last frame. "},"width":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other","description":"The width of the window in the window's default coordinate system. This will always be equal to the `width` setting supplied when the window was created if the `letterbox` setting is enabled. Otherwise it may be larger, but it will never be smaller than the `width` setting.  Readonly. "},"mode":{"returnTypes":[{"type":"ref","name":"window"}],"type":"other"},"keys_down":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns an array of the keys that were down at the start of the current frame. "},"mouse_position":{"returnTypes":[{"type":"ref","name":"window"}],"args":[{"name":"self"},{"name":""}],"type":"function","argsDisplayOmitSelf":"","argsDisplay":"self","description":"Returns the position of the mouse cursor, as a `vec2`, in the window's coordinate system. "}}},"image_buffer":{"type":"table","fields":{"paste":{"args":[{"name":"self"},{"name":"src"},{"name":"x"},{"name":"y"}],"type":"function","argsDisplayOmitSelf":"src, x, y","argsDisplay":"self, src, x, y","description":"Pastes one image into another such that the bottom-left corner of the source image is at the given pixel coordinate in the target image.\nThe bottom-left pixel of the target image has coordinate (1, 1). "},"save_png":{"args":[{"name":"self"},{"name":"filename"}],"type":"function","argsDisplayOmitSelf":"filename","argsDisplay":"self, filename","description":"Saves the given image as a png in `filename`. "}}},"audio_buffer":{"type":"table","fields":{"samples_per_channel":{"type":"other","description":"The number of samples per channel. Readonly. "},"channels":{"type":"other","description":"The number of channels. Readonly. "},"length":{"type":"other","description":"The length of the audio in seconds. Readonly. "},"buffer":{"type":"other"},"sample_rate":{"type":"other","description":"The sample rate in Hz. Readonly. "}}},"texture":{"type":"table","fields":{"width":{"type":"other","description":"Readonly. "},"swrap":{"type":"other","description":"Sets the wrapping mode in the x direction. The allowed values are: \n- `\"clamp_to_edge\"` (the default)\n- `\"repeat\"`\n- `\"mirrored_repeat\"`  Note that the texture width must be a power of 2 if either `\"repeat\"` or `\"mirrored_repeat\"` is used.  Updatable. "},"twrap":{"type":"other","description":"Sets the wrapping mode in the y direction. The allowed values are: \n- `\"clamp_to_edge\"` (the default)\n- `\"repeat\"`\n- `\"mirrored_repeat\"`  Note that the texture height must be a power of 2 if either `\"repeat\"` or `\"mirrored_repeat\"` is used.  Updatable. "},"filter":{"type":"other","description":"This field can be used to set both the minification and magnification fields. The allowed values are: \n- `\"nearest\"`\n- `\"linear\"`  Updatable. "},"image_buffer":{"type":"other","description":"The backing image buffer or `nil` if there isn't one.  Readonly. "},"wrap":{"type":"other","description":"This field can be used to set the wrap mode in both the x and y directions at the same time.  The allowed values are: \n- `\"clamp_to_edge\"`\n- `\"repeat\"`\n- `\"mirrored_repeat\"`  Updatable. "},"minfilter":{"type":"other","description":"Defines the minification filter which is applied when the texture's pixels are smaller that the screen's pixels.  The allowed values are: \n- `\"nearest\"` (the default)\n- `\"linear\"`\n- `\"nearest_mipmap_nearest\"`\n- `\"linear_mipmap_nearest\"`\n- `\"nearest_mipmap_linear\"`\n- `\"linear_mipmap_linear\"`  If one of the mipmap filters is used a mipmap will be automatically generated.  Updatable. "},"height":{"type":"other","description":"Readonly. "},"magfilter":{"type":"other","description":"Defines the magnification filter which is applied when the texture's pixels are larger that the screen's pixels.  The allowed values are: \n- `\"nearest\"` (the default)\n- `\"linear\"`  Updatable. "}}}}}